Picked a random seed ([31m1352137863[0m).
Just set up MPI on rank 0!
Loading cities...done! (loaded 7 cities from the file)
done! (loaded 7 cities from the file)

(1,0)->4.472136	
(2,0)->3.000000	(2,1)->4.123106	
(3,0)->2.236068	(3,1)->3.605551	(3,2)->4.472136	
(4,0)->6.082763	(4,1)->8.544003	(4,2)->9.055386	(4,3)->5.099020	
(5,0)->18.110771	(5,1)->20.099751	(5,2)->21.095022	(5,3)->17.000000	(5,4)->12.041595	
(6,0)->7.211102	(6,1)->6.324555	(6,2)->9.219544	(6,3)->5.000000	(6,4)->5.385165	(6,5)->14.560220	
 -- DISTANCE TABLE --
      00   01   02   03   04   05   06 
00 :0.00 4.47 3.00 2.24 6.08 18.11 7.21 
01 :4.47 0.00 4.12 3.61 8.54 20.10 6.32 
02 :3.00 4.12 0.00 4.47 9.06 21.10 9.22 
03 :2.24 3.61 4.47 0.00 5.10 17.00 5.00 
04 :6.08 8.54 9.06 5.10 0.00 12.04 5.39 
05 :18.11 20.10 21.10 17.00 12.04 0.00 14.56 
06 :7.21 6.32 9.22 5.00 5.39 14.56 0.00 

Num Cities: 0007
---------------------------
City[0000] at 0001, 0004   [id: 0000]
City[0001] at 0005, 0002   [id: 0001]
City[0002] at 0001, 0001   [id: 0002]
City[0003] at 0003, 0005   [id: 0003]
City[0004] at 0002, 0010   [id: 0004]
City[0005] at 0003, 0022   [id: 0005]
City[0006] at 0007, 0008   [id: 0006]
CITY_TO_INT::  0(1,4)  1(5,2)  2(1,1)  3(3,5)  4(2,10)  5(3,22)  6(7,8)  

(1,0)->4.472136	
(2,0)->3.000000	(2,1)->4.123106	
(3,0)->2.236068	(3,1)->3.605551	(3,2)->4.472136	
(4,0)->6.082763	(4,1)->8.544003	(4,2)->9.055386	(4,3)->5.099020	
(5,0)->18.110771	(5,1)->20.099751	(5,2)->21.095022	(5,3)->17.000000	(5,4)->12.041595	
(6,0)->7.211102	(6,1)->6.324555	(6,2)->9.219544	(6,3)->5.000000	(6,4)->5.385165	(6,5)->14.560220	

Num Cities: 0007
---------------------------
City[0000] at 0001, 0004   [id: 0000]
City[0001] at 0005, 0002   [id: 0001]
City[0002] at 0001, 0001   [id: 0002]
City[0003] at 0003, 0005   [id: 0003]
City[0004] at 0002, 0010   [id: 0004]
City[0005] at 0003, 0022   [id: 0005]
City[0006] at 0007, 0008   [id: 0006]
Loop from 0...
Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [3]->s:4
v2:3...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 6, v1e1: 0, v1e2: 6, v1e3: 1
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 0, v1e2: 6, v1e3: 1
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[4]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[1]t1 from graph...
ITERATIONS : 6, 1, 5, 0, 4, 2, 3, 
Ab cycle generated: [32m-t1768697652-> [3]-t0-> [1]-t1-> [5]-t0-> [6]-t1-> [4]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [6]-t0-> [4]-t1-> [2]-t0-> [1]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t1768697652-> [3]-t0-> [1]-t1-> [5]-t0-> [6]-t1-> [4]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [6]-t0-> [4]-t1-> [2]-t0-> [1]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [3]->s:2
v2:3...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[0]t1 from graph...
ITERATIONS : 1, 0, 0, 0, 0, 0, 0, 
Ab cycle generated: [32m-t774975337-> [3]-t0-> [0]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t774975337-> [3]-t0-> [0]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 2 cycles...
Cycle[0]: [3], [1], [5], [6], [4], [2], [0], [5], [6], [4], [2], [1], [3]
Cycle[1]: [3], [0], [3]
(r:0.043284)removing Cycle[0]: [3], [1], [5], [6], [4], [2], [0], [5], [6], [4], [2], [1], [3]
(r:0.000000)removing Cycle[0]: [3], [0], [3]
Printing all 0 cycles in the [32mE-set[0m...

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 5
next node : 6
next node : 4
next node : 2
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [5], [6], [4], [2], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 5 : i1 : c18.110771}
Edge[1] = {5 -> 6 : i1 : c14.560220}
Edge[2] = {6 -> 4 : i1 : c5.385165}
Edge[3] = {4 -> 2 : i1 : c9.055386}
Edge[4] = {2 -> 1 : i1 : c4.123106}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [5], [6], [4], [2], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [5], [6], [4], [2], [1], [3], [0]
[0m
Clean up...Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [6]->s:4
v2:6...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[4]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 6, v1e1: 0, v1e2: 6, v1e3: 1
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 5, v1e1: 4, v1e2: 5, v1e3: 4
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 4, v1e2: 1, v1e3: 4
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 0, v1e2: 6, v1e3: 1
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
ITERATIONS : 8, 3, 2, 0, 1, 4, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [4]-t1-> [2]-t0-> [1]-t1-> [5]-t0-> [6]-t1-> [4]-t0-> [2]-t1-> [0]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [4]-t1-> [2]-t0-> [1]-t1-> [5]-t0-> [6]-t1-> [4]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [6]->s:0
v2:0...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [3]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0001:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [1]->s:2
v2:1...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 1, v1e2: 0, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [1]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [3]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 3 cycles...
Cycle[0]: [6], [4], [2], [1], [5], [6], [4], [2], [0], [5], [6]
Cycle[1]: [0], [3], [0]
Cycle[2]: [1], [3], [1]
(r:0.050422)removing Cycle[0]: [6], [4], [2], [1], [5], [6], [4], [2], [0], [5], [6]
(r:0.000000)removing Cycle[0]: [1], [3], [1]
(r:0.000000)removing Cycle[0]: [0], [3], [0]
Printing all 0 cycles in the [32mE-set[0m...

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 5
next node : 6
next node : 4
next node : 2
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [5], [6], [4], [2], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 5 : i1 : c18.110771}
Edge[1] = {5 -> 6 : i1 : c14.560220}
Edge[2] = {6 -> 4 : i1 : c5.385165}
Edge[3] = {4 -> 2 : i1 : c9.055386}
Edge[4] = {2 -> 1 : i1 : c4.123106}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [5], [6], [4], [2], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [5], [6], [4], [2], [1], [3], [0]
[0m
Clean up...[32m**************  Iteration 1 *****************
[0mLoop from 0...
Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [1]->s:4
v2:1...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 6, v1e1: 1, v1e2: 6, v1e3: 0
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 6, v1e2: 6, v1e3: 0
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
ITERATIONS : 2, 0, 1, 0, 0, 3, 4, 
Ab cycle generated: [32m-t0-> [1]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [6]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [6]-t0-> [5]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [6]->s:2
v2:6...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 5, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [4]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [6]->s:0
v2:1...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [1]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [3]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [0]->s:2
v2:0...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [3]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [6]->s:0
v2:4...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 2, v1e2: 6, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
ITERATIONS : 0, 0, 1, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [4]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [2]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 5 cycles...
Cycle[0]: [1], [2], [0], [5], [6], [5], [1]
Cycle[1]: [6], [4], [6]
Cycle[2]: [1], [3], [1]
Cycle[3]: [0], [3], [0]
Cycle[4]: [4], [2], [4]
(r:0.322733)removing Cycle[0]: [1], [2], [0], [5], [6], [5], [1]
(r:0.000000)removing Cycle[0]: [4], [2], [4]
(r:0.000000)removing Cycle[0]: [0], [3], [0]
(r:0.000000)removing Cycle[0]: [1], [3], [1]
(r:0.000000)removing Cycle[0]: [6], [4], [6]
Printing all 0 cycles in the [32mE-set[0m...

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 5
next node : 6
next node : 4
next node : 2
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [5], [6], [4], [2], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 5 : i1 : c18.110771}
Edge[1] = {5 -> 6 : i1 : c14.560220}
Edge[2] = {6 -> 4 : i1 : c5.385165}
Edge[3] = {4 -> 2 : i1 : c9.055386}
Edge[4] = {2 -> 1 : i1 : c4.123106}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [5], [6], [4], [2], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [5], [6], [4], [2], [1], [3], [0]
[0m
Clean up...Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [2]->s:4
v2:2...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[4]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 5, v1e3: 4
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 1, v1e1: 0, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 3, 2, 
Ab cycle generated: [32m-t0-> [2]-t0-> [4]-t1-> [6]-t0-> [5]
[0m[33mCycle with tail generated, removing tail...
[0mAb cycle reversed: [32m-t1-> [5]-t0-> [6]-t1-> [4]-t0-> [2]
[0mv0,v1,v2: 6,5,2
curCycle->city[3]->id = 2
Restoring edge: 2->4
[32mrestoring[0m edge(v[2]->v[4]t0 to graph...
[32mrestoring[0m edge(v[4]->v[2]t0 to graph...
curCycle->city[2]->id = 4
Restoring edge: 4->6
[32mrestoring[0m edge(v[4]->v[6]t1 to graph...
[32mrestoring[0m edge(v[6]->v[4]t1 to graph...
Ab cycle as fixed: [32m-t1-> [5]-t0-> [6]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t1], [[32m0000[0m:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t1], [[32m0006[0m:t0], [[32m0002[0m:t0], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 2 edges: [0001:t1], [[32m0000[0m:t0]
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m12[[0m...
Choosing a random vertex...
first pick: [5]->s:2
v2:5...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 1, v1e1: 0, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[0]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
ITERATIONS : 1, 3, 0, 2, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [5]-t0-> [0]-t1-> [3]-t0-> [1]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [5]-t0-> [0]-t1-> [3]-t0-> [1]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t1], [[32m0000[0m:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0001[0m:t1]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t1], [[32m0006[0m:t0], [[32m0002[0m:t0], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [4]->s:4
v2:4...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 5, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 0, 1, 
Ab cycle generated: [32m-t0-> [4]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [6]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t1], [[32m0000[0m:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0001[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0002:t1], [[32m0002[0m:t0]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [6]->s:0
v2:1...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 2, v1e2: 6, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 4, v1e2: 4, v1e3: 1
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 0, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
ITERATIONS : 4, 0, 1, 5, 2, 0, 0, 
Ab cycle generated: [32m-t0-> [1]-t0-> [2]-t1-> [4]-t0-> [2]-t1-> [0]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [2]-t1-> [4]-t0-> [2]-t1-> [0]-t0-> [3]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 4 cycles...
Cycle[0]: [5], [6], [5]
Cycle[1]: [5], [0], [3], [1], [5]
Cycle[2]: [4], [6], [4]
Cycle[3]: [1], [2], [4], [2], [0], [3], [1]
(r:0.000000)removing Cycle[0]: [5], [6], [5]
(r:0.629945)allowing Cycle[0]: [1], [2], [4], [2], [0], [3], [1]
(r:0.742446)allowing Cycle[1]: [5], [0], [3], [1], [5]
(r:0.000000)removing Cycle[2]: [4], [6], [4]
Printing all 2 cycles in the [32mE-set[0m...
Cycle[0]: [1]-t0-> [2]-t1-> [4]-t0-> [2]-t1-> [0]-t0-> [3]-t1-> [1]
Cycle[1]: [5]-t0-> [0]-t1-> [3]-t0-> [1]-t1-> [5]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[1]->v[2]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
adding edge to v2 [4]->(2)...
adding edge to v1 [2]->(4)...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
adding edge to v2 [0]->(2)...
adding edge to v1 [2]->(0)...
[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
adding edge to v2 [1]->(3)...
adding edge to v1 [3]->(1)...
[33mremoving[0m edge(v[5]->v[0]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
adding edge to v2 [3]->(0)...
adding edge to v1 [0]->(3)...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
adding edge to v2 [5]->(1)...
adding edge to v1 [1]->(5)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0002:t1], [0003:t1]
0001 [id:0001] -> edges: [0003:t1], [0005:t1]
0002 [id:0002] -> edges: [0004:t1], [0000:t1]
0003 [id:0003] -> edges: [0000:t1], [0001:t1]
0004 [id:0004] -> edges: [0002:t1], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 2
next node : 4
next node : 6
next node : 5
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [2], [4], [6], [5], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0002:t1], [0003:t1]
0001 [id:0001] -> edges: [0003:t1], [0005:t1]
0002 [id:0002] -> edges: [0004:t1], [0000:t1]
0003 [id:0003] -> edges: [0000:t1], [0001:t1]
0004 [id:0004] -> edges: [0002:t1], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 2 : i1 : c3.000000}
Edge[1] = {2 -> 4 : i1 : c9.055386}
Edge[2] = {4 -> 6 : i1 : c5.385165}
Edge[3] = {6 -> 5 : i1 : c14.560220}
Edge[4] = {5 -> 1 : i1 : c20.099751}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [2], [4], [6], [5], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0002:t1], [0003:t1]
0001 [id:0001] -> edges: [0003:t1], [0005:t1]
0002 [id:0002] -> edges: [0004:t1], [0000:t1]
0003 [id:0003] -> edges: [0000:t1], [0001:t1]
0004 [id:0004] -> edges: [0002:t1], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [2], [4], [6], [5], [1], [3], [0]
[0m
Clean up...[32m**************  Iteration 2 *****************
[0mLoop from 0...
Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [6]->s:4
v2:6...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 1, v1e1: 0, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 1, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [5]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 2 edges: [0001:t1], [[32m0000[0m:t0]
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m12[[0m...
Choosing a random vertex...
first pick: [1]->s:4
v2:1...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 0, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
ITERATIONS : 2, 0, 1, 0, 0, 3, 0, 
Ab cycle generated: [32m-t0-> [1]-t0-> [2]-t1-> [0]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [4]->s:4
v2:4...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 5, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 0, 1, 
Ab cycle generated: [32m-t0-> [4]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [6]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [3]->s:4
v2:3...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[1]t1 from graph...
ITERATIONS : 0, 1, 0, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [3]-t0-> [1]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [3]-t0-> [1]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [2]->s:2
v2:2...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 2, v1e2: 6, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [2]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [4]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [2]->s:0
v2:0...
next cycle #5...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [3]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 6 cycles...
Cycle[0]: [6], [5], [6]
Cycle[1]: [1], [2], [0], [5], [1]
Cycle[2]: [4], [6], [4]
Cycle[3]: [3], [1], [3]
Cycle[4]: [2], [4], [2]
Cycle[5]: [0], [3], [0]
(r:0.000000)removing Cycle[0]: [6], [5], [6]
(r:0.000000)removing Cycle[0]: [0], [3], [0]
(r:0.000000)removing Cycle[0]: [2], [4], [2]
(r:0.000000)removing Cycle[0]: [3], [1], [3]
(r:0.000000)removing Cycle[0]: [4], [6], [4]
(r:0.816923)allowing Cycle[0]: [1], [2], [0], [5], [1]
Printing all 1 cycles in the [32mE-set[0m...
Cycle[0]: [1]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [1]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[1]->v[2]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
adding edge to v2 [0]->(2)...
adding edge to v1 [2]->(0)...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph (final edge v2)...
adding edge to v2 [1]->(5)...
adding edge to v1 [5]->(1)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 2
next node : 4
next node : 6
next node : 5
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [2], [4], [6], [5], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 2 : i1 : c3.000000}
Edge[1] = {2 -> 4 : i1 : c9.055386}
Edge[2] = {4 -> 6 : i1 : c5.385165}
Edge[3] = {6 -> 5 : i1 : c14.560220}
Edge[4] = {5 -> 1 : i1 : c20.099751}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [2], [4], [6], [5], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [2], [4], [6], [5], [1], [3], [0]
[0m
Clean up...Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [6]->s:4
v2:6...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 1, v1e1: 0, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 2, v1e1: 6, v1e2: 6, v1e3: 2
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[6]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 6, v1e2: 1, v1e3: 6
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[0]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 2, v1e3: 5
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[1]t1 from graph...
ITERATIONS : 7, 2, 3, 8, 4, 1, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [5]-t1-> [1]-t0-> [2]-t1-> [4]-t0-> [6]-t1-> [5]-t0-> [0]-t1-> [3]-t0-> [1]
[0m[33mCycle with tail generated, removing tail...
[0mAb cycle reversed: [32m-t1-> [1]-t0-> [3]-t1-> [0]-t0-> [5]-t1-> [6]-t0-> [4]-t1-> [2]-t0-> [1]-t1-> [5]-t0-> [6]
[0mv0,v1,v2: 3,1,6
curCycle->city[9]->id = 6
Restoring edge: 6->5
[32mrestoring[0m edge(v[6]->v[5]t0 to graph...
[32mrestoring[0m edge(v[5]->v[6]t0 to graph...
curCycle->city[8]->id = 5
Restoring edge: 5->1
[32mrestoring[0m edge(v[5]->v[1]t1 to graph...
[32mrestoring[0m edge(v[1]->v[5]t1 to graph...
curCycle->city[7]->id = 1
Restoring edge: 1->2
[32mrestoring[0m edge(v[1]->v[2]t0 to graph...
[32mrestoring[0m edge(v[2]->v[1]t0 to graph...
curCycle->city[6]->id = 2
Restoring edge: 2->4
[32mrestoring[0m edge(v[2]->v[4]t1 to graph...
[32mrestoring[0m edge(v[4]->v[2]t1 to graph...
curCycle->city[5]->id = 4
Restoring edge: 4->6
[32mrestoring[0m edge(v[4]->v[6]t0 to graph...
[32mrestoring[0m edge(v[6]->v[4]t0 to graph...
curCycle->city[4]->id = 6
Restoring edge: 6->5
[32mrestoring[0m edge(v[6]->v[5]t1 to graph...
[32mrestoring[0m edge(v[5]->v[6]t1 to graph...
curCycle->city[3]->id = 5
Restoring edge: 5->0
[32mrestoring[0m edge(v[5]->v[0]t0 to graph...
[32mrestoring[0m edge(v[0]->v[5]t0 to graph...
curCycle->city[2]->id = 0
Restoring edge: 0->3
[32mrestoring[0m edge(v[0]->v[3]t1 to graph...
[32mrestoring[0m edge(v[3]->v[0]t1 to graph...
Ab cycle as fixed: [32m-t1-> [1]-t0-> [3]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t1]
0001 [id:[32m0001[0m] -> 2 edges: [0005:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 4 edges: [0000:t1], [[32m0004[0m:t0], [[32m0001[0m:t0], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t1], [[32m0002[0m:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0001[0m:t1], [[32m0006[0m:t1], [[32m0000[0m:t0]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t1], [[32m0005[0m:t0], [[32m0004[0m:t0], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m12[[0m...
Choosing a random vertex...
first pick: [2]->s:4
v2:2...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 0, v1e1: 4, v1e2: 1, v1e3: 4
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 6, v1e1: 0, v1e2: 6, v1e3: 1
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[0]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 3, v1e2: 3, v1e3: 5
[32mnext iteration...v1:0, v2:2
[0m[33mremoving[0m edge(v[0]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[0]t1 from graph...
ITERATIONS : 3, 1, 0, 4, 0, 2, 0, 
Ab cycle generated: [32m-t0-> [2]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [3]-t0-> [0]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [3]-t0-> [0]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t1], [[32m0002[0m:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t1], [[32m0005[0m:t0], [[32m0004[0m:t0], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [6]->s:4
v2:6...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [4]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [5]->s:2
v2:5...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 0, v1e3: 1
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 0, 1, 
Ab cycle generated: [32m-t0-> [5]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [5]-t0-> [6]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [0]->s:0
v2:4...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 2, v1e2: 6, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
ITERATIONS : 0, 0, 1, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [4]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [2]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 5 cycles...
Cycle[0]: [1], [3], [1]
Cycle[1]: [2], [1], [5], [0], [3], [0], [2]
Cycle[2]: [6], [4], [6]
Cycle[3]: [5], [6], [5]
Cycle[4]: [4], [2], [4]
(r:0.000000)removing Cycle[0]: [1], [3], [1]
(r:0.000000)removing Cycle[0]: [4], [2], [4]
(r:0.000000)removing Cycle[0]: [5], [6], [5]
(r:0.000000)removing Cycle[0]: [6], [4], [6]
(r:0.610591)allowing Cycle[0]: [2], [1], [5], [0], [3], [0], [2]
Printing all 1 cycles in the [32mE-set[0m...
Cycle[0]: [2]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [3]-t0-> [0]-t1-> [2]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph (final edge v2)...
adding edge to v2 [5]->(1)...
adding edge to v1 [1]->(5)...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
adding edge to v2 [3]->(0)...
adding edge to v1 [0]->(3)...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[3]t0 from graph...
adding edge to v2 [2]->(0)...
adding edge to v1 [0]->(2)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0003:t1], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t1], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 3
next node : 1
next node : 5
next node : 6
next node : 4
next node : 2
next node : 0
disjointCycle 0: [0], [3], [1], [5], [6], [4], [2], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0003:t1], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t1], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 3 : i1 : c2.236068}
Edge[1] = {3 -> 1 : i1 : c3.605551}
Edge[2] = {1 -> 5 : i1 : c20.099751}
Edge[3] = {5 -> 6 : i1 : c14.560220}
Edge[4] = {6 -> 4 : i1 : c5.385165}
Edge[5] = {4 -> 2 : i1 : c9.055386}
Edge[6] = {2 -> 0 : i1 : c3.000000}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [3], [1], [5], [6], [4], [2], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0003:t1], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t1], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [3], [1], [5], [6], [4], [2], [0]
[0m
Clean up...[32m**************  Iteration 3 *****************
[0mLoop from 0...
Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [0]->s:4
v2:0...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 3, c[0]: 2, c[1]: 3
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
ITERATIONS : 0, 2, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [3]-t1-> [1]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [3]-t1-> [1]-t0-> [3]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 2 edges: [0005:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [1]->s:2
v2:1...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 6, v1e1: 1, v1e2: 6, v1e3: 0
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 6, v1e2: 6, v1e3: 0
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
ITERATIONS : 2, 0, 1, 0, 0, 3, 4, 
Ab cycle generated: [32m-t0-> [1]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [6]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [6]-t0-> [5]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [6]->s:2
v2:6...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 5, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [4]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [2]->s:2
v2:2...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 2, v1e2: 6, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [2]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [4]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 4 cycles...
Cycle[0]: [0], [3], [1], [3], [0]
Cycle[1]: [1], [2], [0], [5], [6], [5], [1]
Cycle[2]: [6], [4], [6]
Cycle[3]: [2], [4], [2]
(r:0.108227)removing Cycle[0]: [0], [3], [1], [3], [0]
(r:0.000000)removing Cycle[0]: [2], [4], [2]
(r:0.000000)removing Cycle[0]: [6], [4], [6]
(r:0.784287)allowing Cycle[0]: [1], [2], [0], [5], [6], [5], [1]
Printing all 1 cycles in the [32mE-set[0m...
Cycle[0]: [1]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [6]-t0-> [5]-t1-> [1]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[1]->v[2]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
adding edge to v2 [0]->(2)...
adding edge to v1 [2]->(0)...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph (final edge v2)...
adding edge to v2 [6]->(5)...
adding edge to v1 [5]->(6)...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
adding edge to v2 [1]->(5)...
adding edge to v1 [5]->(1)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t1]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 2
next node : 4
next node : 6
next node : 5
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [2], [4], [6], [5], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t1]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 2 : i1 : c3.000000}
Edge[1] = {2 -> 4 : i1 : c9.055386}
Edge[2] = {4 -> 6 : i1 : c5.385165}
Edge[3] = {6 -> 5 : i1 : c14.560220}
Edge[4] = {5 -> 1 : i1 : c20.099751}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [2], [4], [6], [5], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t1]
[32mResulting cycle:[7]: [0], [2], [4], [6], [5], [1], [3], [0]
[0m
Clean up...Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [0]->s:4
v2:0...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 3, c[0]: 2, c[1]: 3
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [3]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 2 edges: [0001:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m12[[0m...
Choosing a random vertex...
first pick: [3]->s:2
v2:3...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 1, v1e1: 1, v1e2: 0, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[1]t1 from graph...
ITERATIONS : 0, 1, 0, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [3]-t0-> [1]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [3]-t0-> [1]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 2 edges: [0005:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [0]->s:2
v2:0...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 6, v1e1: 1, v1e2: 6, v1e3: 0
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 3, 1, 2, 
Ab cycle generated: [32m-t0-> [0]-t0-> [5]-t1-> [6]-t0-> [4]
[0m[33mCycle with tail generated, removing tail...
[0mAb cycle reversed: [32m-t1-> [4]-t0-> [6]-t1-> [5]-t0-> [0]
[0mv0,v1,v2: 6,4,0
curCycle->city[3]->id = 0
Restoring edge: 0->5
[32mrestoring[0m edge(v[0]->v[5]t0 to graph...
[32mrestoring[0m edge(v[5]->v[0]t0 to graph...
curCycle->city[2]->id = 5
Restoring edge: 5->6
[32mrestoring[0m edge(v[5]->v[6]t1 to graph...
[32mrestoring[0m edge(v[6]->v[5]t1 to graph...
Ab cycle as fixed: [32m-t1-> [4]-t0-> [6]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0002:t1], [[32m0005[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0005:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0001[0m:t1], [[32m0000[0m:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t0], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [2]->s:4
v2:2...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 2, v1e2: 6, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [2]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [4]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0002:t1], [[32m0005[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0005:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 2 edges: [0001:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0001[0m:t1], [[32m0000[0m:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t0], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [3]->s:0
v2:1...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 4, v1e3: 4
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 6, v1e1: 1, v1e2: 6, v1e3: 0
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
ITERATIONS : 2, 0, 1, 0, 0, 3, 0, 
Ab cycle generated: [32m-t0-> [1]-t0-> [2]-t1-> [0]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t0], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [6]->s:2
v2:6...
next cycle #5...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 1, v1e3: 0
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 1, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [5]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 6 cycles...
Cycle[0]: [0], [3], [0]
Cycle[1]: [3], [1], [3]
Cycle[2]: [4], [6], [4]
Cycle[3]: [2], [4], [2]
Cycle[4]: [1], [2], [0], [5], [1]
Cycle[5]: [6], [5], [6]
(r:0.000000)removing Cycle[0]: [0], [3], [0]
(r:0.000000)removing Cycle[0]: [6], [5], [6]
(r:0.992665)allowing Cycle[0]: [1], [2], [0], [5], [1]
(r:0.000000)removing Cycle[1]: [3], [1], [3]
(r:0.000000)removing Cycle[1]: [2], [4], [2]
(r:0.000000)removing Cycle[1]: [4], [6], [4]
Printing all 1 cycles in the [32mE-set[0m...
Cycle[0]: [1]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [1]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[1]->v[2]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
adding edge to v2 [0]->(2)...
adding edge to v1 [2]->(0)...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph (final edge v2)...
adding edge to v2 [1]->(5)...
adding edge to v1 [5]->(1)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 2
next node : 4
next node : 6
next node : 5
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [2], [4], [6], [5], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 2 : i1 : c3.000000}
Edge[1] = {2 -> 4 : i1 : c9.055386}
Edge[2] = {4 -> 6 : i1 : c5.385165}
Edge[3] = {6 -> 5 : i1 : c14.560220}
Edge[4] = {5 -> 1 : i1 : c20.099751}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [2], [4], [6], [5], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [2], [4], [6], [5], [1], [3], [0]
[0m
Clean up...[32m**************  Iteration 4 *****************
[0mLoop from 0...
Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [5]->s:4
v2:5...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 6, v1e1: 0, v1e2: 6, v1e3: 1
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 4, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 2, 0, 1, 
Ab cycle generated: [32m-t0-> [5]-t0-> [6]-t1-> [4]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [5]-t0-> [6]-t1-> [4]-t0-> [6]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 2 edges: [0001:t1], [[32m0000[0m:t0]
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [3]->s:4
v2:3...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[0]t1 from graph...
ITERATIONS : 1, 0, 0, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [3]-t0-> [0]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [3]-t0-> [0]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 2 edges: [0001:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 2 edges: [0001:t1], [[32m0000[0m:t0]
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [3]->s:2
v2:3...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 1, v1e1: 1, v1e2: 0, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 5, v1e2: 3, v1e3: 3
[32mnext iteration...v1:0, v2:2
[0m[33mremoving[0m edge(v[0]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[0]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 1, v1e1: 4, v1e2: 4, v1e3: 0
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 2, v1e2: 6, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[4]t1 from graph...
ITERATIONS : 3, 1, 4, 0, 5, 2, 0, 
Ab cycle generated: [32m-t0-> [3]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [2]-t0-> [4]
[0m[33mCycle with tail generated, removing tail...
[0mAb cycle reversed: [32m-t1-> [4]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [1]-t0-> [3]
[0mv0,v1,v2: 2,4,3
curCycle->city[5]->id = 3
Restoring edge: 3->1
[32mrestoring[0m edge(v[3]->v[1]t0 to graph...
[32mrestoring[0m edge(v[1]->v[3]t0 to graph...
curCycle->city[4]->id = 1
Restoring edge: 1->5
[32mrestoring[0m edge(v[1]->v[5]t1 to graph...
[32mrestoring[0m edge(v[5]->v[1]t1 to graph...
curCycle->city[3]->id = 5
Restoring edge: 5->0
[32mrestoring[0m edge(v[5]->v[0]t0 to graph...
[32mrestoring[0m edge(v[0]->v[5]t0 to graph...
curCycle->city[2]->id = 0
Restoring edge: 0->2
[32mrestoring[0m edge(v[0]->v[2]t1 to graph...
[32mrestoring[0m edge(v[2]->v[0]t1 to graph...
Ab cycle as fixed: [32m-t1-> [4]-t0-> [2]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t0], [[32m0003[0m:t0], [[32m0005[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0001:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 2 edges: [0001:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 2 edges: [0001:t1], [[32m0000[0m:t0]
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [2]->s:2
v2:2...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 0, v1e2: 4, v1e3: 4
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 5, v1e2: 3, v1e3: 2
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 5, v1e2: 3, v1e3: 3
[32mnext iteration...v1:0, v2:2
[0m[33mremoving[0m edge(v[0]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[0]t1 from graph...
ITERATIONS : 3, 1, 0, 0, 0, 2, 0, 
Ab cycle generated: [32m-t0-> [2]-t0-> [1]-t1-> [5]-t0-> [0]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0001:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [1]->s:2
v2:1...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 1, v1e2: 0, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [1]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [3]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 5 cycles...
Cycle[0]: [5], [6], [4], [6], [5]
Cycle[1]: [3], [0], [3]
Cycle[2]: [4], [2], [4]
Cycle[3]: [2], [1], [5], [0], [2]
Cycle[4]: [1], [3], [1]
(r:0.620108)allowing Cycle[0]: [5], [6], [4], [6], [5]
(r:0.000000)removing Cycle[1]: [3], [0], [3]
(r:0.000000)removing Cycle[1]: [1], [3], [1]
(r:0.622095)allowing Cycle[1]: [2], [1], [5], [0], [2]
(r:0.000000)removing Cycle[2]: [4], [2], [4]
Printing all 2 cycles in the [32mE-set[0m...
Cycle[0]: [5]-t0-> [6]-t1-> [4]-t0-> [6]-t1-> [5]
Cycle[1]: [2]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [2]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph (final edge v2)...
adding edge to v2 [4]->(6)...
adding edge to v1 [6]->(4)...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
adding edge to v2 [5]->(6)...
adding edge to v1 [6]->(5)...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph (final edge v2)...
adding edge to v2 [5]->(1)...
adding edge to v1 [1]->(5)...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
adding edge to v2 [2]->(0)...
adding edge to v1 [0]->(2)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0003:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t1]
0005 [id:0005] -> edges: [0001:t1], [0006:t1]
0006 [id:0006] -> edges: [0004:t1], [0005:t1]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 3
next node : 1
next node : 5
next node : 6
next node : 4
next node : 2
next node : 0
disjointCycle 0: [0], [3], [1], [5], [6], [4], [2], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0003:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t1]
0005 [id:0005] -> edges: [0001:t1], [0006:t1]
0006 [id:0006] -> edges: [0004:t1], [0005:t1]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 3 : i1 : c2.236068}
Edge[1] = {3 -> 1 : i1 : c3.605551}
Edge[2] = {1 -> 5 : i1 : c20.099751}
Edge[3] = {5 -> 6 : i1 : c14.560220}
Edge[4] = {6 -> 4 : i1 : c5.385165}
Edge[5] = {4 -> 2 : i1 : c9.055386}
Edge[6] = {2 -> 0 : i1 : c3.000000}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [3], [1], [5], [6], [4], [2], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0003:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t1]
0005 [id:0005] -> edges: [0001:t1], [0006:t1]
0006 [id:0006] -> edges: [0004:t1], [0005:t1]
[32mResulting cycle:[7]: [0], [3], [1], [5], [6], [4], [2], [0]
[0m
Clean up...Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [0]->s:4
v2:0...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 3, c[0]: 2, c[1]: 3
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
ITERATIONS : 0, 2, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [3]-t1-> [1]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [3]-t1-> [1]-t0-> [3]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 2 edges: [0005:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [6]->s:4
v2:6...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [4]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 2 edges: [0005:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [3]->s:0
v2:6...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 1, v1e1: 0, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 5, v1e2: 3, v1e3: 3
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 0, v1e2: 1, v1e3: 6
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
ITERATIONS : 4, 2, 3, 0, 0, 1, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [5]-t1-> [1]-t0-> [2]-t1-> [0]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [5]-t1-> [1]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [3]->s:0
v2:2...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 2, v1e2: 6, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [2]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [4]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 4 cycles...
Cycle[0]: [0], [3], [1], [3], [0]
Cycle[1]: [6], [4], [6]
Cycle[2]: [6], [5], [1], [2], [0], [5], [6]
Cycle[3]: [2], [4], [2]
(r:0.564256)allowing Cycle[0]: [0], [3], [1], [3], [0]
(r:0.000000)removing Cycle[1]: [6], [4], [6]
(r:0.000000)removing Cycle[1]: [2], [4], [2]
(r:0.625194)allowing Cycle[1]: [6], [5], [1], [2], [0], [5], [6]
Printing all 2 cycles in the [32mE-set[0m...
Cycle[0]: [0]-t0-> [3]-t1-> [1]-t0-> [3]-t1-> [0]
Cycle[1]: [6]-t0-> [5]-t1-> [1]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [6]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[0]->v[3]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
adding edge to v2 [1]->(3)...
adding edge to v1 [3]->(1)...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
adding edge to v2 [0]->(3)...
adding edge to v1 [3]->(0)...
[33mremoving[0m edge(v[6]->v[5]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
adding edge to v2 [1]->(5)...
adding edge to v1 [5]->(1)...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
adding edge to v2 [0]->(2)...
adding edge to v1 [2]->(0)...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
adding edge to v2 [6]->(5)...
adding edge to v1 [5]->(6)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0002:t1], [0003:t1]
0001 [id:0001] -> edges: [0003:t1], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0001:t1], [0006:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t1]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 2
next node : 4
next node : 6
next node : 5
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [2], [4], [6], [5], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0002:t1], [0003:t1]
0001 [id:0001] -> edges: [0003:t1], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0001:t1], [0006:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t1]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 2 : i1 : c3.000000}
Edge[1] = {2 -> 4 : i1 : c9.055386}
Edge[2] = {4 -> 6 : i1 : c5.385165}
Edge[3] = {6 -> 5 : i1 : c14.560220}
Edge[4] = {5 -> 1 : i1 : c20.099751}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [2], [4], [6], [5], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0002:t1], [0003:t1]
0001 [id:0001] -> edges: [0003:t1], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0001:t1], [0006:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t1]
[32mResulting cycle:[7]: [0], [2], [4], [6], [5], [1], [3], [0]
[0m
Clean up...[32m**************  Iteration 5 *****************
[0mLoop from 0...
Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [0]->s:4
v2:0...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 3, c[0]: 2, c[1]: 3
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
ITERATIONS : 0, 2, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [3]-t1-> [1]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [3]-t1-> [1]-t0-> [3]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 2 edges: [0005:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [3]->s:0
v2:4...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 6, v1e1: 1, v1e2: 6, v1e3: 0
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 6, v1e1: 2, v1e2: 6, v1e3: 2
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[4]t1 from graph...
ITERATIONS : 2, 0, 1, 0, 0, 3, 4, 
Ab cycle generated: [32m-t0-> [4]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [6]-t0-> [4]
[0m[33mCycle with tail generated, removing tail...
[0mAb cycle reversed: [32m-t1-> [4]-t0-> [6]-t1-> [5]-t0-> [0]-t1-> [2]-t0-> [4]
[0mv0,v1,v2: 6,4,4
curCycle->city[5]->id = 4
Restoring edge: 4->2
[32mrestoring[0m edge(v[4]->v[2]t0 to graph...
[32mrestoring[0m edge(v[2]->v[4]t0 to graph...
curCycle->city[4]->id = 2
Restoring edge: 2->0
[32mrestoring[0m edge(v[2]->v[0]t1 to graph...
[32mrestoring[0m edge(v[0]->v[2]t1 to graph...
curCycle->city[3]->id = 0
Restoring edge: 0->5
[32mrestoring[0m edge(v[0]->v[5]t0 to graph...
[32mrestoring[0m edge(v[5]->v[0]t0 to graph...
curCycle->city[2]->id = 5
Restoring edge: 5->6
[32mrestoring[0m edge(v[5]->v[6]t1 to graph...
[32mrestoring[0m edge(v[6]->v[5]t1 to graph...
Ab cycle as fixed: [32m-t1-> [4]-t0-> [6]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0002:t1], [[32m0005[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0005:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t1], [[32m0004[0m:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0002:t1], [[32m0002[0m:t0]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0001[0m:t1], [[32m0000[0m:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t0], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [1]->s:2
v2:1...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 0, v1e1: 4, v1e2: 4, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 2, v1e2: 6, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 4, v1e2: 4, v1e3: 1
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 6, v1e1: 1, v1e2: 6, v1e3: 0
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
ITERATIONS : 4, 0, 1, 0, 2, 5, 0, 
Ab cycle generated: [32m-t0-> [1]-t0-> [2]-t1-> [4]-t0-> [2]-t1-> [0]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [2]-t1-> [4]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t0], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [2]->s:0
v2:6...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 1, v1e3: 0
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 1, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [5]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 4 cycles...
Cycle[0]: [0], [3], [1], [3], [0]
Cycle[1]: [4], [6], [4]
Cycle[2]: [1], [2], [4], [2], [0], [5], [1]
Cycle[3]: [6], [5], [6]
(r:0.612979)allowing Cycle[0]: [0], [3], [1], [3], [0]
(r:0.000000)removing Cycle[1]: [4], [6], [4]
(r:0.000000)removing Cycle[1]: [6], [5], [6]
(r:0.875657)allowing Cycle[1]: [1], [2], [4], [2], [0], [5], [1]
Printing all 2 cycles in the [32mE-set[0m...
Cycle[0]: [0]-t0-> [3]-t1-> [1]-t0-> [3]-t1-> [0]
Cycle[1]: [1]-t0-> [2]-t1-> [4]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [1]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[0]->v[3]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
adding edge to v2 [1]->(3)...
adding edge to v1 [3]->(1)...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
adding edge to v2 [0]->(3)...
adding edge to v1 [3]->(0)...
[33mremoving[0m edge(v[1]->v[2]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
adding edge to v2 [4]->(2)...
adding edge to v1 [2]->(4)...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
adding edge to v2 [0]->(2)...
adding edge to v1 [2]->(0)...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph (final edge v2)...
adding edge to v2 [1]->(5)...
adding edge to v1 [5]->(1)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0002:t1], [0003:t1]
0001 [id:0001] -> edges: [0003:t1], [0005:t1]
0002 [id:0002] -> edges: [0004:t1], [0000:t1]
0003 [id:0003] -> edges: [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t1], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 2
next node : 4
next node : 6
next node : 5
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [2], [4], [6], [5], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0002:t1], [0003:t1]
0001 [id:0001] -> edges: [0003:t1], [0005:t1]
0002 [id:0002] -> edges: [0004:t1], [0000:t1]
0003 [id:0003] -> edges: [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t1], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 2 : i1 : c3.000000}
Edge[1] = {2 -> 4 : i1 : c9.055386}
Edge[2] = {4 -> 6 : i1 : c5.385165}
Edge[3] = {6 -> 5 : i1 : c14.560220}
Edge[4] = {5 -> 1 : i1 : c20.099751}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [2], [4], [6], [5], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0002:t1], [0003:t1]
0001 [id:0001] -> edges: [0003:t1], [0005:t1]
0002 [id:0002] -> edges: [0004:t1], [0000:t1]
0003 [id:0003] -> edges: [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t1], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [2], [4], [6], [5], [1], [3], [0]
[0m
Clean up...Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [4]->s:4
v2:4...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 0, 1, 
Ab cycle generated: [32m-t0-> [4]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [6]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m12[[0m...
Choosing a random vertex...
first pick: [3]->s:4
v2:3...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[1]t1 from graph...
ITERATIONS : 0, 1, 0, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [3]-t0-> [1]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [3]-t0-> [1]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0005:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [6]->s:2
v2:6...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 1, v1e1: 0, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 1, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [5]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0005:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 2 edges: [0001:t1], [[32m0000[0m:t0]
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [4]->s:2
v2:4...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 2, v1e2: 6, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
ITERATIONS : 0, 0, 1, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [4]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [2]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0005:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 2 edges: [0001:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 2 edges: [0001:t1], [[32m0000[0m:t0]
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [5]->s:2
v2:5...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 1, v1e1: 0, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:0, v2:2
[0m[33mremoving[0m edge(v[0]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[0]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 0, v1e2: 4, v1e3: 4
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
ITERATIONS : 1, 3, 2, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [5]-t0-> [0]-t1-> [2]-t0-> [1]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [5]-t0-> [0]-t1-> [2]-t0-> [1]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [0]->s:2
v2:0...
next cycle #5...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 2, v1e3: 5
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [3]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 6 cycles...
Cycle[0]: [4], [6], [4]
Cycle[1]: [3], [1], [3]
Cycle[2]: [6], [5], [6]
Cycle[3]: [4], [2], [4]
Cycle[4]: [5], [0], [2], [1], [5]
Cycle[5]: [0], [3], [0]
(r:0.000000)removing Cycle[0]: [4], [6], [4]
(r:0.000000)removing Cycle[0]: [0], [3], [0]
(r:0.370212)removing Cycle[0]: [5], [0], [2], [1], [5]
(r:0.000000)removing Cycle[0]: [4], [2], [4]
(r:0.000000)removing Cycle[0]: [6], [5], [6]
(r:0.000000)removing Cycle[0]: [3], [1], [3]
Printing all 0 cycles in the [32mE-set[0m...

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 5
next node : 6
next node : 4
next node : 2
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [5], [6], [4], [2], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 5 : i1 : c18.110771}
Edge[1] = {5 -> 6 : i1 : c14.560220}
Edge[2] = {6 -> 4 : i1 : c5.385165}
Edge[3] = {4 -> 2 : i1 : c9.055386}
Edge[4] = {2 -> 1 : i1 : c4.123106}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [5], [6], [4], [2], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [5], [6], [4], [2], [1], [3], [0]
[0m
Clean up...[32m**************  Iteration 6 *****************
[0mLoop from 0...
Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [4]->s:4
v2:4...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
ITERATIONS : 0, 0, 1, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [4]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [2]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0001:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m12[[0m...
Choosing a random vertex...
first pick: [5]->s:4
v2:5...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 6, v1e1: 0, v1e2: 6, v1e3: 1
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[0]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 3, v1e2: 3, v1e3: 5
[32mnext iteration...v1:0, v2:2
[0m[33mremoving[0m edge(v[0]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[0]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 0, v1e2: 4, v1e3: 4
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[1]t1 from graph...
ITERATIONS : 1, 5, 4, 2, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [5]-t0-> [0]-t1-> [3]-t0-> [0]-t1-> [2]-t0-> [1]
[0m[33mCycle with tail generated, removing tail...
[0mAb cycle reversed: [32m-t1-> [1]-t0-> [2]-t1-> [0]-t0-> [3]-t1-> [0]-t0-> [5]
[0mv0,v1,v2: 3,1,5
curCycle->city[5]->id = 5
Restoring edge: 5->0
[32mrestoring[0m edge(v[5]->v[0]t0 to graph...
[32mrestoring[0m edge(v[0]->v[5]t0 to graph...
curCycle->city[4]->id = 0
Restoring edge: 0->3
[32mrestoring[0m edge(v[0]->v[3]t1 to graph...
[32mrestoring[0m edge(v[3]->v[0]t1 to graph...
Ab cycle as fixed: [32m-t1-> [1]-t0-> [2]-t1-> [0]-t0-> [3]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0003[0m:t1]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0005[0m:t1]
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0001:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0001[0m:t1], [[32m0006[0m:t1], [[32m0000[0m:t0]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [4]->s:2
v2:4...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 0, 1, 
Ab cycle generated: [32m-t0-> [4]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [6]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0003[0m:t1]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0005[0m:t1]
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0001:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0001[0m:t1], [[32m0006[0m:t1], [[32m0000[0m:t0]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [6]->s:2
v2:6...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 0, v1e1: 1, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 1, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [5]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0003[0m:t1]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0005[0m:t1]
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0001:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 2 edges: [0000:t0], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [3]->s:2
v2:3...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 0, v1e2: 0, v1e3: 1
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 3, v1e2: 3, v1e3: 2
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 5, v1e2: 3, v1e3: 2
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[0]t1 from graph...
ITERATIONS : 3, 1, 0, 0, 0, 2, 0, 
Ab cycle generated: [32m-t0-> [3]-t0-> [1]-t1-> [5]-t0-> [0]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [3]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 5 cycles...
Cycle[0]: [4], [2], [4]
Cycle[1]: [1], [2], [0], [3], [1]
Cycle[2]: [4], [6], [4]
Cycle[3]: [6], [5], [6]
Cycle[4]: [3], [1], [5], [0], [3]
(r:0.000000)removing Cycle[0]: [4], [2], [4]
(r:0.476494)removing Cycle[0]: [3], [1], [5], [0], [3]
(r:0.000000)removing Cycle[0]: [6], [5], [6]
(r:0.000000)removing Cycle[0]: [4], [6], [4]
(r:0.248246)removing Cycle[0]: [1], [2], [0], [3], [1]
Printing all 0 cycles in the [32mE-set[0m...

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 5
next node : 6
next node : 4
next node : 2
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [5], [6], [4], [2], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 5 : i1 : c18.110771}
Edge[1] = {5 -> 6 : i1 : c14.560220}
Edge[2] = {6 -> 4 : i1 : c5.385165}
Edge[3] = {4 -> 2 : i1 : c9.055386}
Edge[4] = {2 -> 1 : i1 : c4.123106}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [5], [6], [4], [2], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [5], [6], [4], [2], [1], [3], [0]
[0m
Clean up...Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [3]->s:4
v2:3...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 6, v1e1: 0, v1e2: 6, v1e3: 1
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:0, v2:2
[0m[33mremoving[0m edge(v[0]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[0]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 1, v1e1: 4, v1e2: 4, v1e3: 0
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[1]t1 from graph...
ITERATIONS : 3, 1, 4, 0, 0, 2, 0, 
Ab cycle generated: [32m-t0-> [3]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [2]-t0-> [1]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [3]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [2]-t0-> [1]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [1]->s:0
v2:6...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 0, v1e3: 1
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 1, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [5]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [4]->s:4
v2:4...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 5, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 0, 1, 
Ab cycle generated: [32m-t0-> [4]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [6]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [4]->s:2
v2:4...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 2, v1e2: 6, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 1, v1e3: 0
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
ITERATIONS : 0, 0, 1, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [4]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [2]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [2]->s:0
v2:0...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 2, v1e3: 5
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [3]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 5 cycles...
Cycle[0]: [3], [1], [5], [0], [2], [1], [3]
Cycle[1]: [6], [5], [6]
Cycle[2]: [4], [6], [4]
Cycle[3]: [4], [2], [4]
Cycle[4]: [0], [3], [0]
(r:0.196050)removing Cycle[0]: [3], [1], [5], [0], [2], [1], [3]
(r:0.000000)removing Cycle[0]: [0], [3], [0]
(r:0.000000)removing Cycle[0]: [4], [2], [4]
(r:0.000000)removing Cycle[0]: [4], [6], [4]
(r:0.000000)removing Cycle[0]: [6], [5], [6]
Printing all 0 cycles in the [32mE-set[0m...

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 5
next node : 6
next node : 4
next node : 2
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [5], [6], [4], [2], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 5 : i1 : c18.110771}
Edge[1] = {5 -> 6 : i1 : c14.560220}
Edge[2] = {6 -> 4 : i1 : c5.385165}
Edge[3] = {4 -> 2 : i1 : c9.055386}
Edge[4] = {2 -> 1 : i1 : c4.123106}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [5], [6], [4], [2], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [5], [6], [4], [2], [1], [3], [0]
[0m
Clean up...[32m**************  Iteration 7 *****************
[0mLoop from 0...
Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [1]->s:4
v2:1...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
ITERATIONS : 2, 0, 1, 3, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [1]-t0-> [2]-t1-> [0]-t0-> [3]
[0m[33mCycle with tail generated, removing tail...
[0mAb cycle reversed: [32m-t1-> [3]-t0-> [0]-t1-> [2]-t0-> [1]
[0mv0,v1,v2: 0,3,1
curCycle->city[3]->id = 1
Restoring edge: 1->2
[32mrestoring[0m edge(v[1]->v[2]t0 to graph...
[32mrestoring[0m edge(v[2]->v[1]t0 to graph...
curCycle->city[2]->id = 2
Restoring edge: 2->0
[32mrestoring[0m edge(v[2]->v[0]t1 to graph...
[32mrestoring[0m edge(v[0]->v[2]t1 to graph...
Ab cycle as fixed: [32m-t1-> [3]-t0-> [0]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0003[0m:t1], [[32m0005[0m:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 4 edges: [0004:t1], [[32m0004[0m:t0], [[32m0001[0m:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 2 edges: [0001:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m12[[0m...
Choosing a random vertex...
first pick: [3]->s:2
v2:3...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 1, v1e1: 1, v1e2: 0, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 2, v1e1: 3, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[1]t1 from graph...
ITERATIONS : 0, 1, 0, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [3]-t0-> [1]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [3]-t0-> [1]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 2 edges: [0002:t0], [[32m0005[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0004:t1], [[32m0004[0m:t0], [[32m0001[0m:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [5]->s:4
v2:5...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 6, v1e1: 0, v1e2: 6, v1e3: 1
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 5, v1e2: 3, v1e3: 3
[32mnext iteration...v1:0, v2:2
[0m[33mremoving[0m edge(v[0]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[0]t1 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 4, v1e1: 4, v1e2: 1, v1e3: 0
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
ITERATIONS : 1, 3, 2, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [5]-t0-> [0]-t1-> [2]-t0-> [1]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [5]-t0-> [0]-t1-> [2]-t0-> [1]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [5]->s:2
v2:5...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 1, v1e3: 0
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 0, 1, 
Ab cycle generated: [32m-t0-> [5]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [5]-t0-> [6]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [4]->s:4
v2:4...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 1, v1e3: 0
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
ITERATIONS : 0, 0, 1, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [4]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [2]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [6]->s:2
v2:6...
next cycle #5...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 5, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [4]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 6 cycles...
Cycle[0]: [3], [0], [3]
Cycle[1]: [3], [1], [3]
Cycle[2]: [5], [0], [2], [1], [5]
Cycle[3]: [5], [6], [5]
Cycle[4]: [4], [2], [4]
Cycle[5]: [6], [4], [6]
(r:0.000000)removing Cycle[0]: [3], [0], [3]
(r:0.000000)removing Cycle[0]: [6], [4], [6]
(r:0.000000)removing Cycle[0]: [4], [2], [4]
(r:0.000000)removing Cycle[0]: [5], [6], [5]
(r:0.225728)removing Cycle[0]: [5], [0], [2], [1], [5]
(r:0.000000)removing Cycle[0]: [3], [1], [3]
Printing all 0 cycles in the [32mE-set[0m...

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 5
next node : 6
next node : 4
next node : 2
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [5], [6], [4], [2], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 5 : i1 : c18.110771}
Edge[1] = {5 -> 6 : i1 : c14.560220}
Edge[2] = {6 -> 4 : i1 : c5.385165}
Edge[3] = {4 -> 2 : i1 : c9.055386}
Edge[4] = {2 -> 1 : i1 : c4.123106}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [5], [6], [4], [2], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [5], [6], [4], [2], [1], [3], [0]
[0m
Clean up...Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [5]->s:4
v2:5...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 6, v1e1: 0, v1e2: 6, v1e3: 1
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 4, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 2, 0, 1, 
Ab cycle generated: [32m-t0-> [5]-t0-> [6]-t1-> [4]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [5]-t0-> [6]-t1-> [4]-t0-> [6]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 2 edges: [0001:t1], [[32m0000[0m:t0]
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [4]->s:2
v2:4...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 2, v1e2: 6, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
ITERATIONS : 2, 4, 1, 3, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [4]-t0-> [2]-t1-> [0]-t0-> [3]-t1-> [1]-t0-> [3]
[0m[33mCycle with tail generated, removing tail...
[0mAb cycle reversed: [32m-t1-> [3]-t0-> [1]-t1-> [3]-t0-> [0]-t1-> [2]-t0-> [4]
[0mv0,v1,v2: 0,3,4
curCycle->city[5]->id = 4
Restoring edge: 4->2
[32mrestoring[0m edge(v[4]->v[2]t0 to graph...
[32mrestoring[0m edge(v[2]->v[4]t0 to graph...
curCycle->city[4]->id = 2
Restoring edge: 2->0
[32mrestoring[0m edge(v[2]->v[0]t1 to graph...
[32mrestoring[0m edge(v[0]->v[2]t1 to graph...
Ab cycle as fixed: [32m-t1-> [3]-t0-> [1]-t1-> [3]-t0-> [0]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 2 edges: [0005:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t1], [[32m0004[0m:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0002:t1], [[32m0002[0m:t0]
0005 [id:[32m0005[0m] -> 2 edges: [0001:t1], [[32m0000[0m:t0]
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [1]->s:2
v2:1...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 0, v1e1: 4, v1e2: 4, v1e3: 1
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 0, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
ITERATIONS : 2, 0, 1, 0, 0, 3, 0, 
Ab cycle generated: [32m-t0-> [1]-t0-> [2]-t1-> [0]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0002:t1], [[32m0002[0m:t0]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [5]->s:0
v2:2...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 2, v1e2: 6, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [2]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [4]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 4 cycles...
Cycle[0]: [5], [6], [4], [6], [5]
Cycle[1]: [3], [1], [3], [0], [3]
Cycle[2]: [1], [2], [0], [5], [1]
Cycle[3]: [2], [4], [2]
(r:0.872593)allowing Cycle[0]: [5], [6], [4], [6], [5]
(r:0.716584)allowing Cycle[1]: [3], [1], [3], [0], [3]
(r:0.666937)allowing Cycle[2]: [1], [2], [0], [5], [1]
(r:0.000000)removing Cycle[3]: [2], [4], [2]
Printing all 3 cycles in the [32mE-set[0m...
Cycle[0]: [5]-t0-> [6]-t1-> [4]-t0-> [6]-t1-> [5]
Cycle[1]: [3]-t0-> [1]-t1-> [3]-t0-> [0]-t1-> [3]
Cycle[2]: [1]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [1]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph (final edge v2)...
adding edge to v2 [4]->(6)...
adding edge to v1 [6]->(4)...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
adding edge to v2 [5]->(6)...
adding edge to v1 [6]->(5)...
[33mremoving[0m edge(v[3]->v[1]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
adding edge to v2 [3]->(1)...
adding edge to v1 [1]->(3)...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[3]t0 from graph (final edge v2)...
adding edge to v2 [3]->(0)...
adding edge to v1 [0]->(3)...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
adding edge to v2 [0]->(2)...
adding edge to v1 [2]->(0)...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
adding edge to v2 [1]->(5)...
adding edge to v1 [5]->(1)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0002:t1], [0003:t1]
0001 [id:0001] -> edges: [0003:t1], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t1]
0005 [id:0005] -> edges: [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t1], [0005:t1]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 2
next node : 4
next node : 6
next node : 5
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [2], [4], [6], [5], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0002:t1], [0003:t1]
0001 [id:0001] -> edges: [0003:t1], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t1]
0005 [id:0005] -> edges: [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t1], [0005:t1]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 2 : i1 : c3.000000}
Edge[1] = {2 -> 4 : i1 : c9.055386}
Edge[2] = {4 -> 6 : i1 : c5.385165}
Edge[3] = {6 -> 5 : i1 : c14.560220}
Edge[4] = {5 -> 1 : i1 : c20.099751}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [2], [4], [6], [5], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0002:t1], [0003:t1]
0001 [id:0001] -> edges: [0003:t1], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t1]
0005 [id:0005] -> edges: [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t1], [0005:t1]
[32mResulting cycle:[7]: [0], [2], [4], [6], [5], [1], [3], [0]
[0m
Clean up...[32m**************  Iteration 8 *****************
[0mLoop from 0...
Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [1]->s:4
v2:1...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 6, v1e1: 1, v1e2: 6, v1e3: 0
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
ITERATIONS : 2, 0, 1, 0, 0, 3, 0, 
Ab cycle generated: [32m-t0-> [1]-t0-> [2]-t1-> [0]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [5]->s:2
v2:5...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 1, v1e3: 0
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 0, 1, 
Ab cycle generated: [32m-t0-> [5]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [5]-t0-> [6]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [0]->s:2
v2:0...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [3]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 2 edges: [0001:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [6]->s:2
v2:6...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 5, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [4]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 2 edges: [0001:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [3]->s:2
v2:3...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 1, v1e1: 1, v1e2: 0, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[1]t1 from graph...
ITERATIONS : 0, 1, 0, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [3]-t0-> [1]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [3]-t0-> [1]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [3]->s:0
v2:4...
next cycle #5...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 2, v1e2: 6, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
ITERATIONS : 0, 0, 1, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [4]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [2]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 6 cycles...
Cycle[0]: [1], [2], [0], [5], [1]
Cycle[1]: [5], [6], [5]
Cycle[2]: [0], [3], [0]
Cycle[3]: [6], [4], [6]
Cycle[4]: [3], [1], [3]
Cycle[5]: [4], [2], [4]
(r:0.939054)allowing Cycle[0]: [1], [2], [0], [5], [1]
(r:0.000000)removing Cycle[1]: [5], [6], [5]
(r:0.000000)removing Cycle[1]: [4], [2], [4]
(r:0.000000)removing Cycle[1]: [3], [1], [3]
(r:0.000000)removing Cycle[1]: [6], [4], [6]
(r:0.000000)removing Cycle[1]: [0], [3], [0]
Printing all 1 cycles in the [32mE-set[0m...
Cycle[0]: [1]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [1]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[1]->v[2]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
adding edge to v2 [0]->(2)...
adding edge to v1 [2]->(0)...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph (final edge v2)...
adding edge to v2 [1]->(5)...
adding edge to v1 [5]->(1)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 2
next node : 4
next node : 6
next node : 5
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [2], [4], [6], [5], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 2 : i1 : c3.000000}
Edge[1] = {2 -> 4 : i1 : c9.055386}
Edge[2] = {4 -> 6 : i1 : c5.385165}
Edge[3] = {6 -> 5 : i1 : c14.560220}
Edge[4] = {5 -> 1 : i1 : c20.099751}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [2], [4], [6], [5], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [2], [4], [6], [5], [1], [3], [0]
[0m
Clean up...Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [4]->s:4
v2:4...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 0, 1, 
Ab cycle generated: [32m-t0-> [4]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [6]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m12[[0m...
Choosing a random vertex...
first pick: [3]->s:4
v2:3...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[1]t1 from graph...
ITERATIONS : 0, 1, 0, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [3]-t0-> [1]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [3]-t0-> [1]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0005:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [5]->s:4
v2:5...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 6, v1e1: 0, v1e2: 6, v1e3: 1
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:0, v2:2
[0m[33mremoving[0m edge(v[0]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[0]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 1, v1e1: 4, v1e2: 4, v1e3: 0
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
ITERATIONS : 1, 3, 2, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [5]-t0-> [0]-t1-> [2]-t0-> [1]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [5]-t0-> [0]-t1-> [2]-t0-> [1]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [1]->s:0
v2:2...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 1, v1e3: 0
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 2, v1e2: 6, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [2]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [4]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [5]->s:2
v2:5...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 1, v1e3: 0
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 0, 1, 
Ab cycle generated: [32m-t0-> [5]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [5]-t0-> [6]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [2]->s:0
v2:3...
next cycle #5...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 2, v1e3: 5
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[0]t1 from graph...
ITERATIONS : 1, 0, 0, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [3]-t0-> [0]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [3]-t0-> [0]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 6 cycles...
Cycle[0]: [4], [6], [4]
Cycle[1]: [3], [1], [3]
Cycle[2]: [5], [0], [2], [1], [5]
Cycle[3]: [2], [4], [2]
Cycle[4]: [5], [6], [5]
Cycle[5]: [3], [0], [3]
(r:0.000000)removing Cycle[0]: [4], [6], [4]
(r:0.000000)removing Cycle[0]: [3], [0], [3]
(r:0.000000)removing Cycle[0]: [5], [6], [5]
(r:0.000000)removing Cycle[0]: [2], [4], [2]
(r:0.943888)allowing Cycle[0]: [5], [0], [2], [1], [5]
(r:0.000000)removing Cycle[1]: [3], [1], [3]
Printing all 1 cycles in the [32mE-set[0m...
Cycle[0]: [5]-t0-> [0]-t1-> [2]-t0-> [1]-t1-> [5]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[5]->v[0]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
adding edge to v2 [2]->(0)...
adding edge to v1 [0]->(2)...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph (final edge v2)...
adding edge to v2 [5]->(1)...
adding edge to v1 [1]->(5)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0003:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0000:t1], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 3
next node : 1
next node : 5
next node : 6
next node : 4
next node : 2
next node : 0
disjointCycle 0: [0], [3], [1], [5], [6], [4], [2], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0003:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0000:t1], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 3 : i1 : c2.236068}
Edge[1] = {3 -> 1 : i1 : c3.605551}
Edge[2] = {1 -> 5 : i1 : c20.099751}
Edge[3] = {5 -> 6 : i1 : c14.560220}
Edge[4] = {6 -> 4 : i1 : c5.385165}
Edge[5] = {4 -> 2 : i1 : c9.055386}
Edge[6] = {2 -> 0 : i1 : c3.000000}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [3], [1], [5], [6], [4], [2], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0003:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0000:t1], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [3], [1], [5], [6], [4], [2], [0]
[0m
Clean up...[32m**************  Iteration 9 *****************
[0mLoop from 0...
Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [1]->s:4
v2:1...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [1]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [3]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0005:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m12[[0m...
Choosing a random vertex...
first pick: [2]->s:4
v2:2...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [2]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [4]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0005:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 2 edges: [0001:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [5]->s:4
v2:5...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 6, v1e1: 0, v1e2: 6, v1e3: 1
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:0, v2:2
[0m[33mremoving[0m edge(v[0]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[0]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 0, v1e2: 4, v1e3: 4
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
ITERATIONS : 1, 3, 2, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [5]-t0-> [0]-t1-> [2]-t0-> [1]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [5]-t0-> [0]-t1-> [2]-t0-> [1]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [4]->s:2
v2:4...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[6]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 1, v1e3: 0
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 5, v1e2: 5, v1e3: 4
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 2, 1, 
Ab cycle generated: [32m-t0-> [4]-t0-> [6]-t1-> [5]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [6]-t1-> [5]-t0-> [6]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [5]->s:0
v2:0...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 2, v1e3: 5
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [3]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 5 cycles...
Cycle[0]: [1], [3], [1]
Cycle[1]: [2], [4], [2]
Cycle[2]: [5], [0], [2], [1], [5]
Cycle[3]: [4], [6], [5], [6], [4]
Cycle[4]: [0], [3], [0]
(r:0.000000)removing Cycle[0]: [1], [3], [1]
(r:0.000000)removing Cycle[0]: [0], [3], [0]
(r:0.891101)allowing Cycle[0]: [4], [6], [5], [6], [4]
(r:0.000000)removing Cycle[1]: [2], [4], [2]
(r:0.806804)allowing Cycle[1]: [5], [0], [2], [1], [5]
Printing all 2 cycles in the [32mE-set[0m...
Cycle[0]: [4]-t0-> [6]-t1-> [5]-t0-> [6]-t1-> [4]
Cycle[1]: [5]-t0-> [0]-t1-> [2]-t0-> [1]-t1-> [5]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[4]->v[6]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
adding edge to v2 [5]->(6)...
adding edge to v1 [6]->(5)...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
adding edge to v2 [4]->(6)...
adding edge to v1 [6]->(4)...
[33mremoving[0m edge(v[5]->v[0]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
adding edge to v2 [2]->(0)...
adding edge to v1 [0]->(2)...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph (final edge v2)...
adding edge to v2 [5]->(1)...
adding edge to v1 [1]->(5)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0003:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0000:t1], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t1]
0005 [id:0005] -> edges: [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0005:t1], [0004:t1]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 3
next node : 1
next node : 5
next node : 6
next node : 4
next node : 2
next node : 0
disjointCycle 0: [0], [3], [1], [5], [6], [4], [2], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0003:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0000:t1], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t1]
0005 [id:0005] -> edges: [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0005:t1], [0004:t1]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 3 : i1 : c2.236068}
Edge[1] = {3 -> 1 : i1 : c3.605551}
Edge[2] = {1 -> 5 : i1 : c20.099751}
Edge[3] = {5 -> 6 : i1 : c14.560220}
Edge[4] = {6 -> 4 : i1 : c5.385165}
Edge[5] = {4 -> 2 : i1 : c9.055386}
Edge[6] = {2 -> 0 : i1 : c3.000000}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [3], [1], [5], [6], [4], [2], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0003:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0000:t1], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t1]
0005 [id:0005] -> edges: [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0005:t1], [0004:t1]
[32mResulting cycle:[7]: [0], [3], [1], [5], [6], [4], [2], [0]
[0m
Clean up...Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [3]->s:4
v2:3...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 6, v1e1: 0, v1e2: 6, v1e3: 1
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:0, v2:2
[0m[33mremoving[0m edge(v[0]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[0]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 1, v1e1: 4, v1e2: 4, v1e3: 0
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[4]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 5, v1e3: 4
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 0, v1e3: 1
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
ITERATIONS : 3, 1, 4, 0, 5, 2, 6, 
Ab cycle generated: [32m-t0-> [3]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [2]-t0-> [4]-t1-> [6]-t0-> [5]
[0m[33mCycle with tail generated, removing tail...
[0mAb cycle reversed: [32m-t1-> [5]-t0-> [6]-t1-> [4]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [1]-t0-> [3]
[0mv0,v1,v2: 6,5,3
curCycle->city[7]->id = 3
Restoring edge: 3->1
[32mrestoring[0m edge(v[3]->v[1]t0 to graph...
[32mrestoring[0m edge(v[1]->v[3]t0 to graph...
curCycle->city[6]->id = 1
Restoring edge: 1->5
[32mrestoring[0m edge(v[1]->v[5]t1 to graph...
[32mrestoring[0m edge(v[5]->v[1]t1 to graph...
curCycle->city[5]->id = 5
Restoring edge: 5->0
[32mrestoring[0m edge(v[5]->v[0]t0 to graph...
[32mrestoring[0m edge(v[0]->v[5]t0 to graph...
curCycle->city[4]->id = 0
Restoring edge: 0->2
[32mrestoring[0m edge(v[0]->v[2]t1 to graph...
[32mrestoring[0m edge(v[2]->v[0]t1 to graph...
curCycle->city[3]->id = 2
Restoring edge: 2->4
[32mrestoring[0m edge(v[2]->v[4]t0 to graph...
[32mrestoring[0m edge(v[4]->v[2]t0 to graph...
curCycle->city[2]->id = 4
Restoring edge: 4->6
[32mrestoring[0m edge(v[4]->v[6]t1 to graph...
[32mrestoring[0m edge(v[6]->v[4]t1 to graph...
Ab cycle as fixed: [32m-t1-> [5]-t0-> [6]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0003[0m:t0], [[32m0005[0m:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t0], [[32m0003[0m:t0], [[32m0005[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t1], [[32m0000[0m:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0000[0m:t1], [[32m0001[0m:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t1], [[32m0006[0m:t0], [[32m0002[0m:t0], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 2 edges: [0001:t1], [[32m0000[0m:t0]
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m12[[0m...
Choosing a random vertex...
first pick: [5]->s:2
v2:5...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 1, v1e1: 0, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 2, v1e3: 5
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[0]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
ITERATIONS : 1, 3, 0, 2, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [5]-t0-> [0]-t1-> [3]-t0-> [1]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [5]-t0-> [0]-t1-> [3]-t0-> [1]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0002:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t1], [[32m0000[0m:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0001[0m:t1]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t1], [[32m0006[0m:t0], [[32m0002[0m:t0], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [5]->s:0
v2:2...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 3
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 3, v1e2: 3, v1e3: 5
[32mnext iteration...v1:0, v2:2
[0m[33mremoving[0m edge(v[0]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[0]t1 from graph...
ITERATIONS : 3, 1, 0, 2, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [2]-t0-> [1]-t1-> [3]-t0-> [0]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [1]-t1-> [3]-t0-> [0]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 4 edges: [0002:t1], [[32m0006[0m:t0], [[32m0002[0m:t0], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [0]->s:0
v2:2...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 2, v1e1: 6, v1e2: 6, v1e3: 2
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[4]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 5, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 6, v1e2: 6, v1e3: 2
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 2, 
Ab cycle generated: [32m-t0-> [2]-t0-> [4]-t1-> [6]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [4]-t1-> [6]-t0-> [4]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 4 cycles...
Cycle[0]: [5], [6], [5]
Cycle[1]: [5], [0], [3], [1], [5]
Cycle[2]: [2], [1], [3], [0], [2]
Cycle[3]: [2], [4], [6], [4], [2]
(r:0.000000)removing Cycle[0]: [5], [6], [5]
(r:0.325099)removing Cycle[0]: [2], [4], [6], [4], [2]
(r:0.892545)allowing Cycle[0]: [2], [1], [3], [0], [2]
(r:0.340649)removing Cycle[1]: [5], [0], [3], [1], [5]
Printing all 1 cycles in the [32mE-set[0m...
Cycle[0]: [2]-t0-> [1]-t1-> [3]-t0-> [0]-t1-> [2]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph (final edge v2)...
adding edge to v2 [3]->(1)...
adding edge to v1 [1]->(3)...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[3]t0 from graph (final edge v2)...
adding edge to v2 [2]->(0)...
adding edge to v1 [0]->(2)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0005:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0003:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0001:t1], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 5
next node : 6
next node : 4
next node : 2
next node : 0
disjointCycle 0: [0], [5], [6], [4], [2], [0]
Checking visited array.
grabbing first unvisited node: 1
next node : 3
next node : 1
disjointCycle 1: [1], [3], [1]
Checking visited array.
Sorting by cycle size (0)...Swapping cycles (actual cycleNum, edge->cycle is this +1) 0 and 1.
there were [32m2[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0005:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0003:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0001:t1], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 5 : i2 : c18.110771}
Edge[1] = {5 -> 6 : i2 : c14.560220}
Edge[2] = {6 -> 4 : i2 : c5.385165}
Edge[3] = {4 -> 2 : i2 : c9.055386}
Edge[4] = {2 -> 0 : i2 : c3.000000}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 1 : i1 : c3.605551}
Printing all 2 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [1], [3], [1]
Cycle[1]: [0], [5], [6], [4], [2], [0]
Choosing starting edges.
b1: in finding first edge not in this cycle: 
b3: b4: Starting bestCost: 5
.e1: 
e1: 
best candidates for merging cycle 1 with 2 will cost -3.44
([31mremoving[0m)b1: {1->3:c3.605551}
([31mremoving[0m)b2: {4->2:c9.055386}
([32m adding [0m)b3: {1->2:c4.123106}
([32m adding [0m)b4: {3->4:c5.099020}
searching for b1 and b2 in edges array and replacing them with b3 and b4 respectively...
curCycle: [32m--> [1]--> [3]--> [1]
[0motherCycle: [32m--> [0]--> [5]--> [6]--> [4]--> [2]--> [0]
[0ma0 b3 : av1 bv4
BEFORE: v1[1]e0->[3] -> v1[3]e0->[1] AND v1[4]e0->[2] -> v1[2]e0->[4]
AFTER(cx): v1[1]e0->[2] -> v1[3]e0->[4] AND v1[4]e0->[3] -> v1[2]e0->[1]
A: [32m--> [1]--> [3]--> [1]
[0mB: [32m--> [0]--> [5]--> [6]--> [4]--> [2]--> [0]
[0mMerged cycle: [32m--> [1]--> [2]--> [0]--> [5]--> [6]--> [4]--> [3]--> [1]
[0m[32mIntermediate Tour T[0m contains (inside fixIntermediate, after combining two cycles): 
0000 [id:0000] -> edges: [0005:t0], [0002:t1]
0001 [id:0001] -> edges: [0002:t0], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0000:t1]
0003 [id:0003] -> edges: [0004:t1], [0001:t0]
0004 [id:0004] -> edges: [0003:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Next cycle...

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0005:t0], [0002:t1]
0001 [id:0001] -> edges: [0002:t0], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0000:t1]
0003 [id:0003] -> edges: [0004:t1], [0001:t0]
0004 [id:0004] -> edges: [0003:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [1], [2], [0], [5], [6], [4], [3], [1]
[0m
Clean up...[32m**************  Iteration 10 *****************
[0mLoop from 0...
Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [0]->s:4
v2:0...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 3, c[0]: 2, c[1]: 3
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
ITERATIONS : 0, 2, 3, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [3]-t1-> [1]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [3]-t1-> [1]-t0-> [2]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0005[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0005[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [1]->s:2
v2:1...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 5, v1e2: 2, v1e3: 3
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 3, v1e2: 2, v1e3: 3
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 6, v1e1: 1, v1e2: 6, v1e3: 0
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
ITERATIONS : 2, 0, 0, 1, 0, 3, 0, 
Ab cycle generated: [32m-t0-> [1]-t0-> [3]-t1-> [0]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [3]-t1-> [0]-t0-> [5]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [3]->s:0
v2:6...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [4]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [4]->s:2
v2:4...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 2, v1e2: 6, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
ITERATIONS : 0, 0, 1, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [4]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [2]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [5]->s:2
v2:5...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 1, v1e3: 0
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 0, 1, 
Ab cycle generated: [32m-t0-> [5]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [5]-t0-> [6]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 5 cycles...
Cycle[0]: [0], [3], [1], [2], [0]
Cycle[1]: [1], [3], [0], [5], [1]
Cycle[2]: [6], [4], [6]
Cycle[3]: [4], [2], [4]
Cycle[4]: [5], [6], [5]
(r:0.859402)allowing Cycle[0]: [0], [3], [1], [2], [0]
(r:0.408396)removing Cycle[1]: [1], [3], [0], [5], [1]
(r:0.000000)removing Cycle[1]: [5], [6], [5]
(r:0.000000)removing Cycle[1]: [4], [2], [4]
(r:0.000000)removing Cycle[1]: [6], [4], [6]
Printing all 1 cycles in the [32mE-set[0m...
Cycle[0]: [0]-t0-> [3]-t1-> [1]-t0-> [2]-t1-> [0]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[0]->v[3]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
adding edge to v2 [1]->(3)...
adding edge to v1 [3]->(1)...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
adding edge to v2 [0]->(2)...
adding edge to v1 [2]->(0)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0005:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0003:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0001:t0], [0001:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 5
next node : 6
next node : 4
next node : 2
next node : 0
disjointCycle 0: [0], [5], [6], [4], [2], [0]
Checking visited array.
grabbing first unvisited node: 1
next node : 3
next node : 1
disjointCycle 1: [1], [3], [1]
Checking visited array.
Sorting by cycle size (0)...Swapping cycles (actual cycleNum, edge->cycle is this +1) 0 and 1.
there were [32m2[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0005:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0003:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0001:t0], [0001:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 5 : i2 : c18.110771}
Edge[1] = {5 -> 6 : i2 : c14.560220}
Edge[2] = {6 -> 4 : i2 : c5.385165}
Edge[3] = {4 -> 2 : i2 : c9.055386}
Edge[4] = {2 -> 0 : i2 : c3.000000}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 1 : i1 : c3.605551}
Printing all 2 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [1], [3], [1]
Cycle[1]: [0], [5], [6], [4], [2], [0]
Choosing starting edges.
b1: in finding first edge not in this cycle: 
b3: b4: Starting bestCost: 5
.e1: 
e1: 
best candidates for merging cycle 1 with 2 will cost -3.44
([31mremoving[0m)b1: {1->3:c3.605551}
([31mremoving[0m)b2: {4->2:c9.055386}
([32m adding [0m)b3: {1->2:c4.123106}
([32m adding [0m)b4: {3->4:c5.099020}
searching for b1 and b2 in edges array and replacing them with b3 and b4 respectively...
curCycle: [32m--> [1]--> [3]--> [1]
[0motherCycle: [32m--> [0]--> [5]--> [6]--> [4]--> [2]--> [0]
[0ma0 b3 : av1 bv4
BEFORE: v1[1]e0->[3] -> v1[3]e0->[1] AND v1[4]e0->[2] -> v1[2]e0->[4]
AFTER(cx): v1[1]e0->[2] -> v1[3]e0->[4] AND v1[4]e0->[3] -> v1[2]e0->[1]
A: [32m--> [1]--> [3]--> [1]
[0mB: [32m--> [0]--> [5]--> [6]--> [4]--> [2]--> [0]
[0mMerged cycle: [32m--> [1]--> [2]--> [0]--> [5]--> [6]--> [4]--> [3]--> [1]
[0m[32mIntermediate Tour T[0m contains (inside fixIntermediate, after combining two cycles): 
0000 [id:0000] -> edges: [0005:t0], [0002:t1]
0001 [id:0001] -> edges: [0002:t0], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0000:t1]
0003 [id:0003] -> edges: [0004:t0], [0001:t1]
0004 [id:0004] -> edges: [0003:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Next cycle...

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0005:t0], [0002:t1]
0001 [id:0001] -> edges: [0002:t0], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0000:t1]
0003 [id:0003] -> edges: [0004:t0], [0001:t1]
0004 [id:0004] -> edges: [0003:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [1], [2], [0], [5], [6], [4], [3], [1]
[0m
Clean up...Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [3]->s:4
v2:3...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[0]t1 from graph...
ITERATIONS : 1, 0, 0, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [3]-t0-> [0]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [3]-t0-> [0]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 2 edges: [0001:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m12[[0m...
Choosing a random vertex...
first pick: [0]->s:2
v2:0...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 6, v1e1: 1, v1e2: 6, v1e3: 0
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 6, v1e2: 6, v1e3: 0
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 1, v1e2: 0, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
ITERATIONS : 0, 4, 0, 5, 0, 1, 2, 
Ab cycle generated: [32m-t0-> [0]-t0-> [5]-t1-> [6]-t0-> [5]-t1-> [1]-t0-> [3]
[0m[33mCycle with tail generated, removing tail...
[0mAb cycle reversed: [32m-t1-> [3]-t0-> [1]-t1-> [5]-t0-> [6]-t1-> [5]-t0-> [0]
[0mv0,v1,v2: 1,3,0
curCycle->city[5]->id = 0
Restoring edge: 0->5
[32mrestoring[0m edge(v[0]->v[5]t0 to graph...
[32mrestoring[0m edge(v[5]->v[0]t0 to graph...
curCycle->city[4]->id = 5
Restoring edge: 5->6
[32mrestoring[0m edge(v[5]->v[6]t1 to graph...
[32mrestoring[0m edge(v[6]->v[5]t1 to graph...
curCycle->city[3]->id = 6
Restoring edge: 6->5
[32mrestoring[0m edge(v[6]->v[5]t0 to graph...
[32mrestoring[0m edge(v[5]->v[6]t0 to graph...
curCycle->city[2]->id = 5
Restoring edge: 5->1
[32mrestoring[0m edge(v[5]->v[1]t1 to graph...
[32mrestoring[0m edge(v[1]->v[5]t1 to graph...
Ab cycle as fixed: [32m-t1-> [3]-t0-> [1]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0002:t1], [[32m0005[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0002:t0], [[32m0005[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0000:t0], [[32m0006[0m:t1], [[32m0006[0m:t0], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0004[0m:t1], [[32m0005[0m:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [2]->s:4
v2:2...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 0, v1e1: 6, v1e2: 6, v1e3: 1
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 4, v1e1: 4, v1e2: 5, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 4, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[6]t1 from graph...
ITERATIONS : 0, 1, 0, 0, 4, 2, 3, 
Ab cycle generated: [32m-t0-> [2]-t0-> [1]-t1-> [5]-t0-> [6]-t1-> [4]-t0-> [6]
[0m[33mCycle with tail generated, removing tail...
[0mAb cycle reversed: [32m-t1-> [6]-t0-> [4]-t1-> [6]-t0-> [5]-t1-> [1]-t0-> [2]
[0mv0,v1,v2: 5,6,2
curCycle->city[5]->id = 2
Restoring edge: 2->1
[32mrestoring[0m edge(v[2]->v[1]t0 to graph...
[32mrestoring[0m edge(v[1]->v[2]t0 to graph...
curCycle->city[4]->id = 1
Restoring edge: 1->5
[32mrestoring[0m edge(v[1]->v[5]t1 to graph...
[32mrestoring[0m edge(v[5]->v[1]t1 to graph...
Ab cycle as fixed: [32m-t1-> [6]-t0-> [4]-t1-> [6]-t0-> [5]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0002:t1], [[32m0005[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0002:t0], [[32m0005[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0004:t1], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0001[0m:t0]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 2 edges: [0000:t0], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [3]->s:0
v2:5...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 5, v1e2: 3, v1e3: 3
[32mnext iteration...v1:0, v2:2
[0m[33mremoving[0m edge(v[0]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[0]t1 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 4, v1e1: 4, v1e2: 1, v1e3: 0
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
ITERATIONS : 1, 3, 2, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [5]-t0-> [0]-t1-> [2]-t0-> [1]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [5]-t0-> [0]-t1-> [2]-t0-> [1]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [6]->s:0
v2:4...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 2, v1e2: 6, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 1, v1e3: 0
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
ITERATIONS : 0, 0, 1, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [4]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [2]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 5 cycles...
Cycle[0]: [3], [0], [3]
Cycle[1]: [3], [1], [3]
Cycle[2]: [6], [4], [6], [5], [6]
Cycle[3]: [5], [0], [2], [1], [5]
Cycle[4]: [4], [2], [4]
(r:0.000000)removing Cycle[0]: [3], [0], [3]
(r:0.000000)removing Cycle[0]: [4], [2], [4]
(r:0.516001)allowing Cycle[0]: [5], [0], [2], [1], [5]
(r:0.000000)removing Cycle[1]: [3], [1], [3]
(r:0.936177)allowing Cycle[1]: [6], [4], [6], [5], [6]
Printing all 2 cycles in the [32mE-set[0m...
Cycle[0]: [5]-t0-> [0]-t1-> [2]-t0-> [1]-t1-> [5]
Cycle[1]: [6]-t0-> [4]-t1-> [6]-t0-> [5]-t1-> [6]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[5]->v[0]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
adding edge to v2 [2]->(0)...
adding edge to v1 [0]->(2)...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph (final edge v2)...
adding edge to v2 [5]->(1)...
adding edge to v1 [1]->(5)...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph (final edge v2)...
adding edge to v2 [6]->(4)...
adding edge to v1 [4]->(6)...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
adding edge to v2 [6]->(5)...
adding edge to v1 [5]->(6)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0003:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0000:t1], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t1]
0005 [id:0005] -> edges: [0001:t1], [0006:t1]
0006 [id:0006] -> edges: [0004:t1], [0005:t1]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 3
next node : 1
next node : 5
next node : 6
next node : 4
next node : 2
next node : 0
disjointCycle 0: [0], [3], [1], [5], [6], [4], [2], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0003:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0000:t1], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t1]
0005 [id:0005] -> edges: [0001:t1], [0006:t1]
0006 [id:0006] -> edges: [0004:t1], [0005:t1]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 3 : i1 : c2.236068}
Edge[1] = {3 -> 1 : i1 : c3.605551}
Edge[2] = {1 -> 5 : i1 : c20.099751}
Edge[3] = {5 -> 6 : i1 : c14.560220}
Edge[4] = {6 -> 4 : i1 : c5.385165}
Edge[5] = {4 -> 2 : i1 : c9.055386}
Edge[6] = {2 -> 0 : i1 : c3.000000}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [3], [1], [5], [6], [4], [2], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0003:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0000:t1], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t1]
0005 [id:0005] -> edges: [0001:t1], [0006:t1]
0006 [id:0006] -> edges: [0004:t1], [0005:t1]
[32mResulting cycle:[7]: [0], [3], [1], [5], [6], [4], [2], [0]
[0m
Clean up...[32m**************  Iteration 11 *****************
[0mLoop from 0...
Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [6]->s:4
v2:6...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 1, v1e1: 0, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 1, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [5]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 2 edges: [0001:t1], [[32m0000[0m:t0]
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m12[[0m...
Choosing a random vertex...
first pick: [0]->s:4
v2:0...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 3, c[0]: 2, c[1]: 3
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
ITERATIONS : 0, 2, 3, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [3]-t1-> [1]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [3]-t1-> [1]-t0-> [2]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0005[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0005[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 2 edges: [0001:t1], [[32m0000[0m:t0]
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [6]->s:2
v2:6...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 5, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[4]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 2, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[4]t1 from graph...
ITERATIONS : 0, 0, 2, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [4]-t1-> [2]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [4]-t1-> [2]-t0-> [4]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0005[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0005[0m:t1]
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 2 edges: [0001:t1], [[32m0000[0m:t0]
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [5]->s:2
v2:5...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 1, v1e1: 0, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 5, v1e2: 2, v1e3: 3
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[0]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 0, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 3, v1e2: 2, v1e3: 3
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
ITERATIONS : 1, 3, 0, 2, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [5]-t0-> [0]-t1-> [3]-t0-> [1]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [5]-t0-> [0]-t1-> [3]-t0-> [1]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 4 cycles...
Cycle[0]: [6], [5], [6]
Cycle[1]: [0], [3], [1], [2], [0]
Cycle[2]: [6], [4], [2], [4], [6]
Cycle[3]: [5], [0], [3], [1], [5]
(r:0.000000)removing Cycle[0]: [6], [5], [6]
(r:0.185393)removing Cycle[0]: [5], [0], [3], [1], [5]
(r:0.569768)allowing Cycle[0]: [6], [4], [2], [4], [6]
(r:0.583266)allowing Cycle[1]: [0], [3], [1], [2], [0]
Printing all 2 cycles in the [32mE-set[0m...
Cycle[0]: [6]-t0-> [4]-t1-> [2]-t0-> [4]-t1-> [6]
Cycle[1]: [0]-t0-> [3]-t1-> [1]-t0-> [2]-t1-> [0]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph (final edge v2)...
adding edge to v2 [2]->(4)...
adding edge to v1 [4]->(2)...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
adding edge to v2 [6]->(4)...
adding edge to v1 [4]->(6)...
[33mremoving[0m edge(v[0]->v[3]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
adding edge to v2 [1]->(3)...
adding edge to v1 [3]->(1)...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
adding edge to v2 [0]->(2)...
adding edge to v1 [2]->(0)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0005:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0003:t1]
0002 [id:0002] -> edges: [0004:t1], [0000:t1]
0003 [id:0003] -> edges: [0001:t0], [0001:t1]
0004 [id:0004] -> edges: [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0005:t0], [0004:t1]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 5
next node : 6
next node : 4
next node : 2
next node : 0
disjointCycle 0: [0], [5], [6], [4], [2], [0]
Checking visited array.
grabbing first unvisited node: 1
next node : 3
next node : 1
disjointCycle 1: [1], [3], [1]
Checking visited array.
Sorting by cycle size (0)...Swapping cycles (actual cycleNum, edge->cycle is this +1) 0 and 1.
there were [32m2[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0005:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0003:t1]
0002 [id:0002] -> edges: [0004:t1], [0000:t1]
0003 [id:0003] -> edges: [0001:t0], [0001:t1]
0004 [id:0004] -> edges: [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0005:t0], [0004:t1]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 5 : i2 : c18.110771}
Edge[1] = {5 -> 6 : i2 : c14.560220}
Edge[2] = {6 -> 4 : i2 : c5.385165}
Edge[3] = {4 -> 2 : i2 : c9.055386}
Edge[4] = {2 -> 0 : i2 : c3.000000}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 1 : i1 : c3.605551}
Printing all 2 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [1], [3], [1]
Cycle[1]: [0], [5], [6], [4], [2], [0]
Choosing starting edges.
b1: in finding first edge not in this cycle: 
b3: b4: Starting bestCost: 5
.e1: 
e1: 
best candidates for merging cycle 1 with 2 will cost -3.44
([31mremoving[0m)b1: {1->3:c3.605551}
([31mremoving[0m)b2: {4->2:c9.055386}
([32m adding [0m)b3: {1->2:c4.123106}
([32m adding [0m)b4: {3->4:c5.099020}
searching for b1 and b2 in edges array and replacing them with b3 and b4 respectively...
curCycle: [32m--> [1]--> [3]--> [1]
[0motherCycle: [32m--> [0]--> [5]--> [6]--> [4]--> [2]--> [0]
[0ma0 b3 : av1 bv4
BEFORE: v1[1]e0->[3] -> v1[3]e0->[1] AND v1[4]e0->[2] -> v1[2]e0->[4]
AFTER(cx): v1[1]e0->[2] -> v1[3]e0->[4] AND v1[4]e0->[3] -> v1[2]e0->[1]
A: [32m--> [1]--> [3]--> [1]
[0mB: [32m--> [0]--> [5]--> [6]--> [4]--> [2]--> [0]
[0mMerged cycle: [32m--> [1]--> [2]--> [0]--> [5]--> [6]--> [4]--> [3]--> [1]
[0m[32mIntermediate Tour T[0m contains (inside fixIntermediate, after combining two cycles): 
0000 [id:0000] -> edges: [0005:t0], [0002:t1]
0001 [id:0001] -> edges: [0002:t0], [0003:t1]
0002 [id:0002] -> edges: [0001:t1], [0000:t1]
0003 [id:0003] -> edges: [0004:t0], [0001:t1]
0004 [id:0004] -> edges: [0003:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0005:t0], [0004:t1]
Next cycle...

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0005:t0], [0002:t1]
0001 [id:0001] -> edges: [0002:t0], [0003:t1]
0002 [id:0002] -> edges: [0001:t1], [0000:t1]
0003 [id:0003] -> edges: [0004:t0], [0001:t1]
0004 [id:0004] -> edges: [0003:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0005:t0], [0004:t1]
[32mResulting cycle:[7]: [1], [2], [0], [5], [6], [4], [3], [1]
[0m
Clean up...Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [0]->s:4
v2:0...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 3, c[0]: 2, c[1]: 3
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 2, v1e1: 6, v1e2: 6, v1e3: 2
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 4, v1e2: 4, v1e3: 1
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
ITERATIONS : 0, 2, 3, 1, 4, 0, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [3]-t1-> [1]-t0-> [2]-t1-> [4]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [3]-t1-> [1]-t0-> [2]-t1-> [4]-t0-> [2]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0005[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0005[0m:t1]
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [1]->s:2
v2:1...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 5, v1e2: 2, v1e3: 3
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 3, v1e2: 2, v1e3: 3
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 6, v1e1: 1, v1e2: 6, v1e3: 0
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
ITERATIONS : 2, 0, 0, 1, 0, 3, 0, 
Ab cycle generated: [32m-t0-> [1]-t0-> [3]-t1-> [0]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [3]-t1-> [0]-t0-> [5]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [0]->s:0
v2:5...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 1, v1e3: 0
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 4, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 2, 0, 1, 
Ab cycle generated: [32m-t0-> [5]-t0-> [6]-t1-> [4]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [5]-t0-> [6]-t1-> [4]-t0-> [6]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 3 cycles...
Cycle[0]: [0], [3], [1], [2], [4], [2], [0]
Cycle[1]: [1], [3], [0], [5], [1]
Cycle[2]: [5], [6], [4], [6], [5]
(r:0.721280)allowing Cycle[0]: [0], [3], [1], [2], [4], [2], [0]
(r:0.411941)removing Cycle[1]: [1], [3], [0], [5], [1]
(r:0.680331)allowing Cycle[1]: [5], [6], [4], [6], [5]
Printing all 2 cycles in the [32mE-set[0m...
Cycle[0]: [0]-t0-> [3]-t1-> [1]-t0-> [2]-t1-> [4]-t0-> [2]-t1-> [0]
Cycle[1]: [5]-t0-> [6]-t1-> [4]-t0-> [6]-t1-> [5]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[0]->v[3]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
adding edge to v2 [1]->(3)...
adding edge to v1 [3]->(1)...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
adding edge to v2 [4]->(2)...
adding edge to v1 [2]->(4)...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
adding edge to v2 [0]->(2)...
adding edge to v1 [2]->(0)...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph (final edge v2)...
adding edge to v2 [4]->(6)...
adding edge to v1 [6]->(4)...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
adding edge to v2 [5]->(6)...
adding edge to v1 [6]->(5)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0005:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0003:t1]
0002 [id:0002] -> edges: [0004:t1], [0000:t1]
0003 [id:0003] -> edges: [0001:t0], [0001:t1]
0004 [id:0004] -> edges: [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0000:t0], [0006:t1]
0006 [id:0006] -> edges: [0004:t1], [0005:t1]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 5
next node : 6
next node : 4
next node : 2
next node : 0
disjointCycle 0: [0], [5], [6], [4], [2], [0]
Checking visited array.
grabbing first unvisited node: 1
next node : 3
next node : 1
disjointCycle 1: [1], [3], [1]
Checking visited array.
Sorting by cycle size (0)...Swapping cycles (actual cycleNum, edge->cycle is this +1) 0 and 1.
there were [32m2[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0005:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0003:t1]
0002 [id:0002] -> edges: [0004:t1], [0000:t1]
0003 [id:0003] -> edges: [0001:t0], [0001:t1]
0004 [id:0004] -> edges: [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0000:t0], [0006:t1]
0006 [id:0006] -> edges: [0004:t1], [0005:t1]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 5 : i2 : c18.110771}
Edge[1] = {5 -> 6 : i2 : c14.560220}
Edge[2] = {6 -> 4 : i2 : c5.385165}
Edge[3] = {4 -> 2 : i2 : c9.055386}
Edge[4] = {2 -> 0 : i2 : c3.000000}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 1 : i1 : c3.605551}
Printing all 2 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [1], [3], [1]
Cycle[1]: [0], [5], [6], [4], [2], [0]
Choosing starting edges.
b1: in finding first edge not in this cycle: 
b3: b4: Starting bestCost: 5
.e1: 
e1: 
best candidates for merging cycle 1 with 2 will cost -3.44
([31mremoving[0m)b1: {1->3:c3.605551}
([31mremoving[0m)b2: {4->2:c9.055386}
([32m adding [0m)b3: {1->2:c4.123106}
([32m adding [0m)b4: {3->4:c5.099020}
searching for b1 and b2 in edges array and replacing them with b3 and b4 respectively...
curCycle: [32m--> [1]--> [3]--> [1]
[0motherCycle: [32m--> [0]--> [5]--> [6]--> [4]--> [2]--> [0]
[0ma0 b3 : av1 bv4
BEFORE: v1[1]e0->[3] -> v1[3]e0->[1] AND v1[4]e0->[2] -> v1[2]e0->[4]
AFTER(cx): v1[1]e0->[2] -> v1[3]e0->[4] AND v1[4]e0->[3] -> v1[2]e0->[1]
A: [32m--> [1]--> [3]--> [1]
[0mB: [32m--> [0]--> [5]--> [6]--> [4]--> [2]--> [0]
[0mMerged cycle: [32m--> [1]--> [2]--> [0]--> [5]--> [6]--> [4]--> [3]--> [1]
[0m[32mIntermediate Tour T[0m contains (inside fixIntermediate, after combining two cycles): 
0000 [id:0000] -> edges: [0005:t0], [0002:t1]
0001 [id:0001] -> edges: [0002:t0], [0003:t1]
0002 [id:0002] -> edges: [0001:t1], [0000:t1]
0003 [id:0003] -> edges: [0004:t0], [0001:t1]
0004 [id:0004] -> edges: [0003:t1], [0006:t1]
0005 [id:0005] -> edges: [0000:t0], [0006:t1]
0006 [id:0006] -> edges: [0004:t1], [0005:t1]
Next cycle...

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0005:t0], [0002:t1]
0001 [id:0001] -> edges: [0002:t0], [0003:t1]
0002 [id:0002] -> edges: [0001:t1], [0000:t1]
0003 [id:0003] -> edges: [0004:t0], [0001:t1]
0004 [id:0004] -> edges: [0003:t1], [0006:t1]
0005 [id:0005] -> edges: [0000:t0], [0006:t1]
0006 [id:0006] -> edges: [0004:t1], [0005:t1]
[32mResulting cycle:[7]: [1], [2], [0], [5], [6], [4], [3], [1]
[0m
Clean up...[32m**************  Iteration 12 *****************
[0mLoop from 0...
Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [4]->s:4
v2:4...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 6, v1e1: 1, v1e2: 6, v1e3: 0
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 1, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
ITERATIONS : 2, 4, 1, 0, 0, 3, 0, 
Ab cycle generated: [32m-t0-> [4]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [1]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [1]-t0-> [2]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [3]->s:4
v2:3...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 2, v1e3: 5
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[1]t1 from graph...
ITERATIONS : 0, 1, 0, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [3]-t0-> [1]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [3]-t0-> [1]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [0]->s:2
v2:0...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [3]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [2]->s:0
v2:5...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 1, v1e3: 0
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 4, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 2, 0, 1, 
Ab cycle generated: [32m-t0-> [5]-t0-> [6]-t1-> [4]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [5]-t0-> [6]-t1-> [4]-t0-> [6]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 4 cycles...
Cycle[0]: [4], [2], [0], [5], [1], [2], [4]
Cycle[1]: [3], [1], [3]
Cycle[2]: [0], [3], [0]
Cycle[3]: [5], [6], [4], [6], [5]
(r:0.682323)allowing Cycle[0]: [4], [2], [0], [5], [1], [2], [4]
(r:0.000000)removing Cycle[1]: [3], [1], [3]
(r:0.579041)allowing Cycle[1]: [5], [6], [4], [6], [5]
(r:0.000000)removing Cycle[2]: [0], [3], [0]
Printing all 2 cycles in the [32mE-set[0m...
Cycle[0]: [4]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [1]-t0-> [2]-t1-> [4]
Cycle[1]: [5]-t0-> [6]-t1-> [4]-t0-> [6]-t1-> [5]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph (final edge v2)...
adding edge to v2 [0]->(2)...
adding edge to v1 [2]->(0)...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph (final edge v2)...
adding edge to v2 [1]->(5)...
adding edge to v1 [5]->(1)...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
adding edge to v2 [4]->(2)...
adding edge to v1 [2]->(4)...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph (final edge v2)...
adding edge to v2 [4]->(6)...
adding edge to v1 [6]->(4)...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
adding edge to v2 [5]->(6)...
adding edge to v1 [6]->(5)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0006:t1], [0002:t1]
0005 [id:0005] -> edges: [0001:t1], [0006:t1]
0006 [id:0006] -> edges: [0004:t1], [0005:t1]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 2
next node : 4
next node : 6
next node : 5
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [2], [4], [6], [5], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0006:t1], [0002:t1]
0005 [id:0005] -> edges: [0001:t1], [0006:t1]
0006 [id:0006] -> edges: [0004:t1], [0005:t1]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 2 : i1 : c3.000000}
Edge[1] = {2 -> 4 : i1 : c9.055386}
Edge[2] = {4 -> 6 : i1 : c5.385165}
Edge[3] = {6 -> 5 : i1 : c14.560220}
Edge[4] = {5 -> 1 : i1 : c20.099751}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [2], [4], [6], [5], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0006:t1], [0002:t1]
0005 [id:0005] -> edges: [0001:t1], [0006:t1]
0006 [id:0006] -> edges: [0004:t1], [0005:t1]
[32mResulting cycle:[7]: [0], [2], [4], [6], [5], [1], [3], [0]
[0m
Clean up...Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [0]->s:4
v2:0...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 2, c[0]: 2, c[1]: 3
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 6, v1e1: 1, v1e2: 6, v1e3: 0
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 2, v1e1: 6, v1e2: 6, v1e3: 2
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 4, v1e2: 4, v1e3: 1
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
ITERATIONS : 0, 2, 3, 0, 4, 1, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [5]-t1-> [1]-t0-> [2]-t1-> [4]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [5]-t1-> [1]-t0-> [2]-t1-> [4]-t0-> [2]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [1]->s:2
v2:1...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 2, v1e3: 5
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 2, v1e3: 5
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 0, v1e2: 0, v1e3: 1
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
ITERATIONS : 2, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [1]-t0-> [3]-t1-> [0]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [3]-t1-> [0]-t0-> [3]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [2]->s:0
v2:5...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 1, v1e3: 0
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 4, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 2, 0, 1, 
Ab cycle generated: [32m-t0-> [5]-t0-> [6]-t1-> [4]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [5]-t0-> [6]-t1-> [4]-t0-> [6]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 3 cycles...
Cycle[0]: [0], [5], [1], [2], [4], [2], [0]
Cycle[1]: [1], [3], [0], [3], [1]
Cycle[2]: [5], [6], [4], [6], [5]
(r:0.185484)removing Cycle[0]: [0], [5], [1], [2], [4], [2], [0]
(r:0.241848)removing Cycle[0]: [5], [6], [4], [6], [5]
(r:0.204218)removing Cycle[0]: [1], [3], [0], [3], [1]
Printing all 0 cycles in the [32mE-set[0m...

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 5
next node : 6
next node : 4
next node : 2
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [5], [6], [4], [2], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 5 : i1 : c18.110771}
Edge[1] = {5 -> 6 : i1 : c14.560220}
Edge[2] = {6 -> 4 : i1 : c5.385165}
Edge[3] = {4 -> 2 : i1 : c9.055386}
Edge[4] = {2 -> 1 : i1 : c4.123106}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [5], [6], [4], [2], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [5], [6], [4], [2], [1], [3], [0]
[0m
Clean up...[32m**************  Iteration 13 *****************
[0mLoop from 0...
Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [2]->s:4
v2:2...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [2]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [4]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0001:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m12[[0m...
Choosing a random vertex...
first pick: [6]->s:4
v2:6...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 1, v1e1: 0, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 4, v1e3: 4
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 0, v1e2: 1, v1e3: 6
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
ITERATIONS : 4, 2, 3, 0, 0, 1, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [5]-t1-> [1]-t0-> [2]-t1-> [0]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [5]-t1-> [1]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [1]->s:2
v2:1...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 2, v1e3: 5
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [1]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [3]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [4]->s:2
v2:4...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 5, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 0, 1, 
Ab cycle generated: [32m-t0-> [4]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [6]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [4]->s:0
v2:0...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [3]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 5 cycles...
Cycle[0]: [2], [4], [2]
Cycle[1]: [6], [5], [1], [2], [0], [5], [6]
Cycle[2]: [1], [3], [1]
Cycle[3]: [4], [6], [4]
Cycle[4]: [0], [3], [0]
(r:0.000000)removing Cycle[0]: [2], [4], [2]
(r:0.000000)removing Cycle[0]: [0], [3], [0]
(r:0.000000)removing Cycle[0]: [4], [6], [4]
(r:0.000000)removing Cycle[0]: [1], [3], [1]
(r:0.830726)allowing Cycle[0]: [6], [5], [1], [2], [0], [5], [6]
Printing all 1 cycles in the [32mE-set[0m...
Cycle[0]: [6]-t0-> [5]-t1-> [1]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [6]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[6]->v[5]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
adding edge to v2 [1]->(5)...
adding edge to v1 [5]->(1)...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
adding edge to v2 [0]->(2)...
adding edge to v1 [2]->(0)...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
adding edge to v2 [6]->(5)...
adding edge to v1 [5]->(6)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0001:t1], [0006:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t1]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 2
next node : 4
next node : 6
next node : 5
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [2], [4], [6], [5], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0001:t1], [0006:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t1]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 2 : i1 : c3.000000}
Edge[1] = {2 -> 4 : i1 : c9.055386}
Edge[2] = {4 -> 6 : i1 : c5.385165}
Edge[3] = {6 -> 5 : i1 : c14.560220}
Edge[4] = {5 -> 1 : i1 : c20.099751}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [2], [4], [6], [5], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0001:t1], [0006:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t1]
[32mResulting cycle:[7]: [0], [2], [4], [6], [5], [1], [3], [0]
[0m
Clean up...Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [6]->s:4
v2:6...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[4]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 6, v1e1: 0, v1e2: 6, v1e3: 1
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 5, v1e1: 4, v1e2: 5, v1e3: 4
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 4, v1e2: 1, v1e3: 4
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
ITERATIONS : 8, 3, 2, 9, 1, 4, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [4]-t1-> [2]-t0-> [1]-t1-> [5]-t0-> [6]-t1-> [4]-t0-> [2]-t1-> [0]-t0-> [3]-t1-> [1]-t0-> [3]
[0m[33mCycle with tail generated, removing tail...
[0mAb cycle reversed: [32m-t1-> [3]-t0-> [1]-t1-> [3]-t0-> [0]-t1-> [2]-t0-> [4]-t1-> [6]-t0-> [5]-t1-> [1]-t0-> [2]-t1-> [4]-t0-> [6]
[0mv0,v1,v2: 0,3,6
curCycle->city[11]->id = 6
Restoring edge: 6->4
[32mrestoring[0m edge(v[6]->v[4]t0 to graph...
[32mrestoring[0m edge(v[4]->v[6]t0 to graph...
curCycle->city[10]->id = 4
Restoring edge: 4->2
[32mrestoring[0m edge(v[4]->v[2]t1 to graph...
[32mrestoring[0m edge(v[2]->v[4]t1 to graph...
curCycle->city[9]->id = 2
Restoring edge: 2->1
[32mrestoring[0m edge(v[2]->v[1]t0 to graph...
[32mrestoring[0m edge(v[1]->v[2]t0 to graph...
curCycle->city[8]->id = 1
Restoring edge: 1->5
[32mrestoring[0m edge(v[1]->v[5]t1 to graph...
[32mrestoring[0m edge(v[5]->v[1]t1 to graph...
curCycle->city[7]->id = 5
Restoring edge: 5->6
[32mrestoring[0m edge(v[5]->v[6]t0 to graph...
[32mrestoring[0m edge(v[6]->v[5]t0 to graph...
curCycle->city[6]->id = 6
Restoring edge: 6->4
[32mrestoring[0m edge(v[6]->v[4]t1 to graph...
[32mrestoring[0m edge(v[4]->v[6]t1 to graph...
curCycle->city[5]->id = 4
Restoring edge: 4->2
[32mrestoring[0m edge(v[4]->v[2]t0 to graph...
[32mrestoring[0m edge(v[2]->v[4]t0 to graph...
curCycle->city[4]->id = 2
Restoring edge: 2->0
[32mrestoring[0m edge(v[2]->v[0]t1 to graph...
[32mrestoring[0m edge(v[0]->v[2]t1 to graph...
Ab cycle as fixed: [32m-t1-> [3]-t0-> [1]-t1-> [3]-t0-> [0]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 2 edges: [0002:t0], [[32m0005[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0004:t1], [[32m0001[0m:t0], [[32m0004[0m:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 4 edges: [0006:t0], [[32m0002[0m:t1], [[32m0006[0m:t1], [[32m0002[0m:t0]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t1], [[32m0000[0m:t0], [[32m0001[0m:t1], [[32m0006[0m:t0]
0006 [id:[32m0006[0m] -> 4 edges: [0005:t1], [[32m0004[0m:t0], [[32m0005[0m:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [1]->s:2
v2:1...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 5, v1e2: 3, v1e3: 3
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 0, v1e2: 4, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 6, v1e1: 2, v1e2: 6, v1e3: 2
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 5, v1e1: 4, v1e2: 5, v1e3: 4
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
ITERATIONS : 0, 0, 1, 0, 2, 0, 3, 
Ab cycle generated: [32m-t0-> [1]-t0-> [2]-t1-> [4]-t0-> [6]
[0m[33mCycle with tail generated, removing tail...
[0mAb cycle reversed: [32m-t1-> [6]-t0-> [4]-t1-> [2]-t0-> [1]
[0mv0,v1,v2: 4,6,1
curCycle->city[3]->id = 1
Restoring edge: 1->2
[32mrestoring[0m edge(v[1]->v[2]t0 to graph...
[32mrestoring[0m edge(v[2]->v[1]t0 to graph...
curCycle->city[2]->id = 2
Restoring edge: 2->4
[32mrestoring[0m edge(v[2]->v[4]t1 to graph...
[32mrestoring[0m edge(v[4]->v[2]t1 to graph...
Ab cycle as fixed: [32m-t1-> [6]-t0-> [4]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 2 edges: [0005:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 4 edges: [0004:t0], [[32m0000[0m:t1], [[32m0001[0m:t0], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t1], [[32m0000[0m:t0], [[32m0001[0m:t1], [[32m0006[0m:t0]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [2]->s:4
v2:2...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 4, v1e1: 0, v1e2: 1, v1e3: 4
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 6, v1e1: 0, v1e2: 6, v1e3: 1
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 5, v1e2: 3, v1e3: 3
[32mnext iteration...v1:0, v2:2
[0m[33mremoving[0m edge(v[0]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[0]t1 from graph...
ITERATIONS : 3, 1, 0, 0, 0, 2, 0, 
Ab cycle generated: [32m-t0-> [2]-t0-> [1]-t1-> [5]-t0-> [0]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [5]->s:2
v2:5...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 0, v1e3: 1
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 0, 1, 
Ab cycle generated: [32m-t0-> [5]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [5]-t0-> [6]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [4]->s:2
v2:4...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 2, v1e2: 6, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
ITERATIONS : 0, 0, 1, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [4]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [2]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 5 cycles...
Cycle[0]: [3], [1], [3], [0], [3]
Cycle[1]: [6], [4], [6]
Cycle[2]: [2], [1], [5], [0], [2]
Cycle[3]: [5], [6], [5]
Cycle[4]: [4], [2], [4]
(r:0.376776)removing Cycle[0]: [3], [1], [3], [0], [3]
(r:0.000000)removing Cycle[0]: [4], [2], [4]
(r:0.000000)removing Cycle[0]: [5], [6], [5]
(r:0.315572)removing Cycle[0]: [2], [1], [5], [0], [2]
(r:0.000000)removing Cycle[0]: [6], [4], [6]
Printing all 0 cycles in the [32mE-set[0m...

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 5
next node : 6
next node : 4
next node : 2
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [5], [6], [4], [2], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 5 : i1 : c18.110771}
Edge[1] = {5 -> 6 : i1 : c14.560220}
Edge[2] = {6 -> 4 : i1 : c5.385165}
Edge[3] = {4 -> 2 : i1 : c9.055386}
Edge[4] = {2 -> 1 : i1 : c4.123106}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [5], [6], [4], [2], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [5], [6], [4], [2], [1], [3], [0]
[0m
Clean up...[32m**************  Iteration 14 *****************
[0mLoop from 0...
Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [1]->s:4
v2:1...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [1]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [3]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0005:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m12[[0m...
Choosing a random vertex...
first pick: [2]->s:4
v2:2...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [2]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [4]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0005:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 2 edges: [0001:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [1]->s:2
v2:1...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 4, v1e3: 4
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 6, v1e1: 1, v1e2: 6, v1e3: 0
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
ITERATIONS : 2, 0, 1, 0, 0, 3, 0, 
Ab cycle generated: [32m-t0-> [1]-t0-> [2]-t1-> [0]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [6]->s:4
v2:6...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 1, v1e3: 0
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 1, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [5]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [1]->s:0
v2:4...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 5, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 0, 1, 
Ab cycle generated: [32m-t0-> [4]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [6]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [4]->s:0
v2:3...
next cycle #5...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[0]t1 from graph...
ITERATIONS : 1, 0, 0, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [3]-t0-> [0]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [3]-t0-> [0]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 6 cycles...
Cycle[0]: [1], [3], [1]
Cycle[1]: [2], [4], [2]
Cycle[2]: [1], [2], [0], [5], [1]
Cycle[3]: [6], [5], [6]
Cycle[4]: [4], [6], [4]
Cycle[5]: [3], [0], [3]
(r:0.000000)removing Cycle[0]: [1], [3], [1]
(r:0.000000)removing Cycle[0]: [3], [0], [3]
(r:0.000000)removing Cycle[0]: [4], [6], [4]
(r:0.000000)removing Cycle[0]: [6], [5], [6]
(r:0.528208)allowing Cycle[0]: [1], [2], [0], [5], [1]
(r:0.000000)removing Cycle[1]: [2], [4], [2]
Printing all 1 cycles in the [32mE-set[0m...
Cycle[0]: [1]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [1]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[1]->v[2]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
adding edge to v2 [0]->(2)...
adding edge to v1 [2]->(0)...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph (final edge v2)...
adding edge to v2 [1]->(5)...
adding edge to v1 [5]->(1)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 2
next node : 4
next node : 6
next node : 5
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [2], [4], [6], [5], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 2 : i1 : c3.000000}
Edge[1] = {2 -> 4 : i1 : c9.055386}
Edge[2] = {4 -> 6 : i1 : c5.385165}
Edge[3] = {6 -> 5 : i1 : c14.560220}
Edge[4] = {5 -> 1 : i1 : c20.099751}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [2], [4], [6], [5], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [2], [4], [6], [5], [1], [3], [0]
[0m
Clean up...Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [2]->s:4
v2:2...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 6, v1e1: 0, v1e2: 6, v1e3: 1
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[0]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 3, v1e2: 3, v1e3: 5
[32mnext iteration...v1:0, v2:2
[0m[33mremoving[0m edge(v[0]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[0]t1 from graph...
ITERATIONS : 3, 1, 0, 4, 0, 2, 0, 
Ab cycle generated: [32m-t0-> [2]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [3]-t0-> [0]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [3]-t0-> [0]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 2 edges: [0001:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [6]->s:4
v2:6...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 0, v1e3: 1
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 1, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [5]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 2 edges: [0001:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [6]->s:2
v2:6...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 5, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [4]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 2 edges: [0001:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [5]->s:0
v2:1...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 1, v1e2: 0, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [1]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [3]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [1]->s:0
v2:2...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 2, v1e2: 6, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [2]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [4]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 5 cycles...
Cycle[0]: [2], [1], [5], [0], [3], [0], [2]
Cycle[1]: [6], [5], [6]
Cycle[2]: [6], [4], [6]
Cycle[3]: [1], [3], [1]
Cycle[4]: [2], [4], [2]
(r:0.754483)allowing Cycle[0]: [2], [1], [5], [0], [3], [0], [2]
(r:0.000000)removing Cycle[1]: [6], [5], [6]
(r:0.000000)removing Cycle[1]: [2], [4], [2]
(r:0.000000)removing Cycle[1]: [1], [3], [1]
(r:0.000000)removing Cycle[1]: [6], [4], [6]
Printing all 1 cycles in the [32mE-set[0m...
Cycle[0]: [2]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [3]-t0-> [0]-t1-> [2]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph (final edge v2)...
adding edge to v2 [5]->(1)...
adding edge to v1 [1]->(5)...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
adding edge to v2 [3]->(0)...
adding edge to v1 [0]->(3)...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[3]t0 from graph...
adding edge to v2 [2]->(0)...
adding edge to v1 [0]->(2)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0003:t1], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t1], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 3
next node : 1
next node : 5
next node : 6
next node : 4
next node : 2
next node : 0
disjointCycle 0: [0], [3], [1], [5], [6], [4], [2], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0003:t1], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t1], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 3 : i1 : c2.236068}
Edge[1] = {3 -> 1 : i1 : c3.605551}
Edge[2] = {1 -> 5 : i1 : c20.099751}
Edge[3] = {5 -> 6 : i1 : c14.560220}
Edge[4] = {6 -> 4 : i1 : c5.385165}
Edge[5] = {4 -> 2 : i1 : c9.055386}
Edge[6] = {2 -> 0 : i1 : c3.000000}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [3], [1], [5], [6], [4], [2], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0003:t1], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t1], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [3], [1], [5], [6], [4], [2], [0]
[0m
Clean up...[32m**************  Iteration 15 *****************
[0mLoop from 0...
Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [0]->s:4
v2:0...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 3, c[0]: 2, c[1]: 3
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [3]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 2 edges: [0001:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m12[[0m...
Choosing a random vertex...
first pick: [4]->s:4
v2:4...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 0, 1, 
Ab cycle generated: [32m-t0-> [4]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [6]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 2 edges: [0001:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [6]->s:2
v2:6...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 1, v1e1: 0, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 1, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [5]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 2 edges: [0001:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 2 edges: [0001:t1], [[32m0000[0m:t0]
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [0]->s:2
v2:0...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 0, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 1, v1e2: 0, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
ITERATIONS : 0, 2, 0, 3, 0, 1, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [5]-t1-> [1]-t0-> [3]
[0m[33mCycle with tail generated, removing tail...
[0mAb cycle reversed: [32m-t1-> [3]-t0-> [1]-t1-> [5]-t0-> [0]
[0mv0,v1,v2: 1,3,0
curCycle->city[3]->id = 0
Restoring edge: 0->5
[32mrestoring[0m edge(v[0]->v[5]t0 to graph...
[32mrestoring[0m edge(v[5]->v[0]t0 to graph...
curCycle->city[2]->id = 5
Restoring edge: 5->1
[32mrestoring[0m edge(v[5]->v[1]t1 to graph...
[32mrestoring[0m edge(v[1]->v[5]t1 to graph...
Ab cycle as fixed: [32m-t1-> [3]-t0-> [1]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0002:t1], [[32m0005[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0002:t0], [[32m0005[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 2 edges: [0000:t0], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [0]->s:2
v2:0...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 2, v1e1: 5, v1e2: 3, v1e3: 3
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 0, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 5, v1e2: 3, v1e3: 3
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
ITERATIONS : 0, 2, 3, 0, 0, 1, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [5]-t1-> [1]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [5]-t1-> [1]-t0-> [2]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [2]->s:2
v2:2...
next cycle #5...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 2, v1e2: 6, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [2]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [4]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 6 cycles...
Cycle[0]: [0], [3], [0]
Cycle[1]: [4], [6], [4]
Cycle[2]: [6], [5], [6]
Cycle[3]: [3], [1], [3]
Cycle[4]: [0], [5], [1], [2], [0]
Cycle[5]: [2], [4], [2]
(r:0.000000)removing Cycle[0]: [0], [3], [0]
(r:0.000000)removing Cycle[0]: [2], [4], [2]
(r:0.425455)removing Cycle[0]: [0], [5], [1], [2], [0]
(r:0.000000)removing Cycle[0]: [3], [1], [3]
(r:0.000000)removing Cycle[0]: [6], [5], [6]
(r:0.000000)removing Cycle[0]: [4], [6], [4]
Printing all 0 cycles in the [32mE-set[0m...

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 5
next node : 6
next node : 4
next node : 2
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [5], [6], [4], [2], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 5 : i1 : c18.110771}
Edge[1] = {5 -> 6 : i1 : c14.560220}
Edge[2] = {6 -> 4 : i1 : c5.385165}
Edge[3] = {4 -> 2 : i1 : c9.055386}
Edge[4] = {2 -> 1 : i1 : c4.123106}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [5], [6], [4], [2], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [5], [6], [4], [2], [1], [3], [0]
[0m
Clean up...Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [0]->s:4
v2:0...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 3, c[0]: 2, c[1]: 3
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
ITERATIONS : 0, 2, 3, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [3]-t1-> [1]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [3]-t1-> [1]-t0-> [2]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0005[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0005[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [2]->s:2
v2:2...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[4]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 5, v1e3: 4
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 6, v1e2: 6, v1e3: 2
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 2, 
Ab cycle generated: [32m-t0-> [2]-t0-> [4]-t1-> [6]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [4]-t1-> [6]-t0-> [4]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0005[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0005[0m:t1]
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [2]->s:0
v2:3...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 3, v1e2: 2, v1e3: 3
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 6, v1e1: 0, v1e2: 6, v1e3: 1
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[6]t1 from graph...
ITERATIONS : 0, 1, 0, 0, 0, 2, 3, 
Ab cycle generated: [32m-t0-> [3]-t0-> [1]-t1-> [5]-t0-> [6]
[0m[33mCycle with tail generated, removing tail...
[0mAb cycle reversed: [32m-t1-> [6]-t0-> [5]-t1-> [1]-t0-> [3]
[0mv0,v1,v2: 5,6,3
curCycle->city[3]->id = 3
Restoring edge: 3->1
[32mrestoring[0m edge(v[3]->v[1]t0 to graph...
[32mrestoring[0m edge(v[1]->v[3]t0 to graph...
curCycle->city[2]->id = 1
Restoring edge: 1->5
[32mrestoring[0m edge(v[1]->v[5]t1 to graph...
[32mrestoring[0m edge(v[5]->v[1]t1 to graph...
Ab cycle as fixed: [32m-t1-> [6]-t0-> [5]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0005[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0005[0m:t1]
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 2 edges: [0000:t0], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [3]->s:2
v2:3...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 3, v1e2: 2, v1e3: 3
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 5, v1e2: 2, v1e3: 3
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[0]t1 from graph...
ITERATIONS : 3, 1, 0, 0, 0, 2, 0, 
Ab cycle generated: [32m-t0-> [3]-t0-> [1]-t1-> [5]-t0-> [0]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [3]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 4 cycles...
Cycle[0]: [0], [3], [1], [2], [0]
Cycle[1]: [2], [4], [6], [4], [2]
Cycle[2]: [6], [5], [6]
Cycle[3]: [3], [1], [5], [0], [3]
(r:0.048697)removing Cycle[0]: [0], [3], [1], [2], [0]
(r:0.548724)allowing Cycle[0]: [3], [1], [5], [0], [3]
(r:0.139553)removing Cycle[1]: [2], [4], [6], [4], [2]
(r:0.000000)removing Cycle[1]: [6], [5], [6]
Printing all 1 cycles in the [32mE-set[0m...
Cycle[0]: [3]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [3]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[3]->v[1]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
adding edge to v2 [5]->(1)...
adding edge to v1 [1]->(5)...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
adding edge to v2 [3]->(0)...
adding edge to v1 [0]->(3)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0003:t0], [0003:t1]
0001 [id:0001] -> edges: [0002:t0], [0005:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 3
next node : 0
disjointCycle 0: [0], [3], [0]
Checking visited array.
grabbing first unvisited node: 1
next node : 2
next node : 4
next node : 6
next node : 5
next node : 1
disjointCycle 1: [1], [2], [4], [6], [5], [1]
Checking visited array.
Sorting by cycle size (0)...noswap
there were [32m2[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0003:t0], [0003:t1]
0001 [id:0001] -> edges: [0002:t0], [0005:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 3 : i1 : c2.236068}
Edge[1] = {3 -> 0 : i1 : c2.236068}
Edge[2] = {1 -> 2 : i2 : c4.123106}
Edge[3] = {2 -> 4 : i2 : c9.055386}
Edge[4] = {4 -> 6 : i2 : c5.385165}
Edge[5] = {6 -> 5 : i2 : c14.560220}
Edge[6] = {5 -> 1 : i2 : c20.099751}
Printing all 2 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [3], [0]
Cycle[1]: [1], [2], [4], [6], [5], [1]
Choosing starting edges.
b1: in finding first edge not in this cycle: 
b3: b4: Starting bestCost: 2
.e1: 
e1: 
best candidates for merging cycle 1 with 2 will cost -3.19
([31mremoving[0m)b1: {0->3:c2.236068}
([31mremoving[0m)b2: {2->4:c9.055386}
([32m adding [0m)b3: {0->2:c3.000000}
([32m adding [0m)b4: {3->4:c5.099020}
searching for b1 and b2 in edges array and replacing them with b3 and b4 respectively...
curCycle: [32m--> [0]--> [3]--> [0]
[0motherCycle: [32m--> [1]--> [2]--> [4]--> [6]--> [5]--> [1]
[0ma0 b1 : av0 bv2
BEFORE: v1[0]e0->[3] -> v1[3]e0->[0] AND v1[2]e1->[4] -> v1[4]e0->[2]
AFTER(nm): v1[0]e0->[2] -> v1[3]e0->[4] AND v1[2]e1->[0] -> v1[4]e0->[3]
A: [32m--> [0]--> [3]--> [0]
[0mB: [32m--> [1]--> [2]--> [4]--> [6]--> [5]--> [1]
[0mMerged cycle: [32m--> [0]--> [2]--> [1]--> [5]--> [6]--> [4]--> [3]--> [0]
[0m[32mIntermediate Tour T[0m contains (inside fixIntermediate, after combining two cycles): 
0000 [id:0000] -> edges: [0002:t0], [0003:t1]
0001 [id:0001] -> edges: [0002:t0], [0005:t1]
0002 [id:0002] -> edges: [0001:t0], [0000:t0]
0003 [id:0003] -> edges: [0004:t0], [0000:t1]
0004 [id:0004] -> edges: [0003:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Next cycle...

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0002:t0], [0003:t1]
0001 [id:0001] -> edges: [0002:t0], [0005:t1]
0002 [id:0002] -> edges: [0001:t0], [0000:t0]
0003 [id:0003] -> edges: [0004:t0], [0000:t1]
0004 [id:0004] -> edges: [0003:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [2], [1], [5], [6], [4], [3], [0]
[0m
Clean up...[32m**************  Iteration 16 *****************
[0mLoop from 0...
Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [6]->s:4
v2:6...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 1, v1e1: 0, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
ITERATIONS : 0, 2, 0, 3, 0, 1, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [5]-t1-> [1]-t0-> [3]
[0m[33mCycle with tail generated, removing tail...
[0mAb cycle reversed: [32m-t1-> [3]-t0-> [1]-t1-> [5]-t0-> [6]
[0mv0,v1,v2: 1,3,6
curCycle->city[3]->id = 6
Restoring edge: 6->5
[32mrestoring[0m edge(v[6]->v[5]t0 to graph...
[32mrestoring[0m edge(v[5]->v[6]t0 to graph...
curCycle->city[2]->id = 5
Restoring edge: 5->1
[32mrestoring[0m edge(v[5]->v[1]t1 to graph...
[32mrestoring[0m edge(v[1]->v[5]t1 to graph...
Ab cycle as fixed: [32m-t1-> [3]-t0-> [1]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0002:t0], [[32m0005[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t1], [[32m0000[0m:t0], [[32m0006[0m:t0], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t1], [[32m0004[0m:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m12[[0m...
Choosing a random vertex...
first pick: [3]->s:2
v2:3...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[0]t1 from graph...
ITERATIONS : 1, 0, 0, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [3]-t0-> [0]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [3]-t0-> [0]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 2 edges: [0002:t0], [[32m0005[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t1], [[32m0000[0m:t0], [[32m0006[0m:t0], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t1], [[32m0004[0m:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [4]->s:4
v2:4...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 6, v1e1: 1, v1e2: 6, v1e3: 0
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 5, v1e2: 3, v1e3: 3
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 1, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
ITERATIONS : 2, 4, 1, 0, 0, 3, 0, 
Ab cycle generated: [32m-t0-> [4]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [1]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [1]-t0-> [2]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t1], [[32m0004[0m:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [4]->s:2
v2:4...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 0, 1, 
Ab cycle generated: [32m-t0-> [4]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [6]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t0], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [3]->s:0
v2:6...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 1, v1e3: 0
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 1, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [5]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 5 cycles...
Cycle[0]: [3], [1], [3]
Cycle[1]: [3], [0], [3]
Cycle[2]: [4], [2], [0], [5], [1], [2], [4]
Cycle[3]: [4], [6], [4]
Cycle[4]: [6], [5], [6]
(r:0.000000)removing Cycle[0]: [3], [1], [3]
(r:0.000000)removing Cycle[0]: [6], [5], [6]
(r:0.000000)removing Cycle[0]: [4], [6], [4]
(r:0.878810)allowing Cycle[0]: [4], [2], [0], [5], [1], [2], [4]
(r:0.000000)removing Cycle[1]: [3], [0], [3]
Printing all 1 cycles in the [32mE-set[0m...
Cycle[0]: [4]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [1]-t0-> [2]-t1-> [4]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph (final edge v2)...
adding edge to v2 [0]->(2)...
adding edge to v1 [2]->(0)...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph (final edge v2)...
adding edge to v2 [1]->(5)...
adding edge to v1 [5]->(1)...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
adding edge to v2 [4]->(2)...
adding edge to v1 [2]->(4)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0006:t0], [0002:t1]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 2
next node : 4
next node : 6
next node : 5
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [2], [4], [6], [5], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0006:t0], [0002:t1]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 2 : i1 : c3.000000}
Edge[1] = {2 -> 4 : i1 : c9.055386}
Edge[2] = {4 -> 6 : i1 : c5.385165}
Edge[3] = {6 -> 5 : i1 : c14.560220}
Edge[4] = {5 -> 1 : i1 : c20.099751}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [2], [4], [6], [5], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0006:t0], [0002:t1]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [2], [4], [6], [5], [1], [3], [0]
[0m
Clean up...Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [1]->s:4
v2:1...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 6, v1e1: 1, v1e2: 6, v1e3: 0
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[4]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 2, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[4]t1 from graph...
ITERATIONS : 2, 0, 6, 1, 5, 3, 4, 
Ab cycle generated: [32m-t0-> [1]-t0-> [3]-t1-> [0]-t0-> [5]-t1-> [6]-t0-> [4]-t1-> [2]-t0-> [4]
[0m[33mCycle with tail generated, removing tail...
[0mAb cycle reversed: [32m-t1-> [4]-t0-> [2]-t1-> [4]-t0-> [6]-t1-> [5]-t0-> [0]-t1-> [3]-t0-> [1]
[0mv0,v1,v2: 6,4,1
curCycle->city[7]->id = 1
Restoring edge: 1->3
[32mrestoring[0m edge(v[1]->v[3]t0 to graph...
[32mrestoring[0m edge(v[3]->v[1]t0 to graph...
curCycle->city[6]->id = 3
Restoring edge: 3->0
[32mrestoring[0m edge(v[3]->v[0]t1 to graph...
[32mrestoring[0m edge(v[0]->v[3]t1 to graph...
curCycle->city[5]->id = 0
Restoring edge: 0->5
[32mrestoring[0m edge(v[0]->v[5]t0 to graph...
[32mrestoring[0m edge(v[5]->v[0]t0 to graph...
curCycle->city[4]->id = 5
Restoring edge: 5->6
[32mrestoring[0m edge(v[5]->v[6]t1 to graph...
[32mrestoring[0m edge(v[6]->v[5]t1 to graph...
Ab cycle as fixed: [32m-t1-> [4]-t0-> [2]-t1-> [4]-t0-> [6]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t1], [[32m0003[0m:t1], [[32m0005[0m:t0]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t0]
0002 [id:[32m0002[0m] -> 2 edges: [0001:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t1], [[32m0001[0m:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0001[0m:t1], [[32m0000[0m:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t0], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [3]->s:4
v2:3...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[0]t1 from graph...
ITERATIONS : 1, 0, 0, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [3]-t0-> [0]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [3]-t0-> [0]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t0]
0002 [id:[32m0002[0m] -> 2 edges: [0001:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 2 edges: [0001:t0], [[32m0001[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0001[0m:t1], [[32m0000[0m:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t0], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [4]->s:0
v2:0...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 6, v1e1: 1, v1e2: 6, v1e3: 0
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 1, v1e2: 0, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
ITERATIONS : 0, 2, 0, 3, 0, 1, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [5]-t1-> [1]-t0-> [3]
[0m[33mCycle with tail generated, removing tail...
[0mAb cycle reversed: [32m-t1-> [3]-t0-> [1]-t1-> [5]-t0-> [0]
[0mv0,v1,v2: 1,3,0
curCycle->city[3]->id = 0
Restoring edge: 0->5
[32mrestoring[0m edge(v[0]->v[5]t0 to graph...
[32mrestoring[0m edge(v[5]->v[0]t0 to graph...
curCycle->city[2]->id = 5
Restoring edge: 5->1
[32mrestoring[0m edge(v[5]->v[1]t1 to graph...
[32mrestoring[0m edge(v[1]->v[5]t1 to graph...
Ab cycle as fixed: [32m-t1-> [3]-t0-> [1]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0002:t1], [[32m0005[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0002:t0], [[32m0005[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0001:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0006[0m:t1], [[32m0000[0m:t0], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t0], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [0]->s:2
v2:0...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 2, v1e1: 5, v1e2: 3, v1e3: 3
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 6, v1e1: 6, v1e2: 1, v1e3: 0
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 5, v1e2: 3, v1e3: 3
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 4, v1e3: 4
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
ITERATIONS : 0, 2, 3, 0, 0, 1, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [5]-t1-> [1]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [5]-t1-> [1]-t0-> [2]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t0], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [1]->s:0
v2:6...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 1, v1e3: 0
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 1, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [5]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 5 cycles...
Cycle[0]: [4], [2], [4], [6], [4]
Cycle[1]: [3], [0], [3]
Cycle[2]: [3], [1], [3]
Cycle[3]: [0], [5], [1], [2], [0]
Cycle[4]: [6], [5], [6]
(r:0.528761)allowing Cycle[0]: [4], [2], [4], [6], [4]
(r:0.000000)removing Cycle[1]: [3], [0], [3]
(r:0.000000)removing Cycle[1]: [6], [5], [6]
(r:0.217111)removing Cycle[1]: [0], [5], [1], [2], [0]
(r:0.000000)removing Cycle[1]: [3], [1], [3]
Printing all 1 cycles in the [32mE-set[0m...
Cycle[0]: [4]-t0-> [2]-t1-> [4]-t0-> [6]-t1-> [4]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph (final edge v2)...
adding edge to v2 [4]->(2)...
adding edge to v1 [2]->(4)...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
adding edge to v2 [4]->(6)...
adding edge to v1 [6]->(4)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0005:t0], [0004:t1]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 5
next node : 6
next node : 4
next node : 2
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [5], [6], [4], [2], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0005:t0], [0004:t1]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 5 : i1 : c18.110771}
Edge[1] = {5 -> 6 : i1 : c14.560220}
Edge[2] = {6 -> 4 : i1 : c5.385165}
Edge[3] = {4 -> 2 : i1 : c9.055386}
Edge[4] = {2 -> 1 : i1 : c4.123106}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [5], [6], [4], [2], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0005:t0], [0004:t1]
[32mResulting cycle:[7]: [0], [5], [6], [4], [2], [1], [3], [0]
[0m
Clean up...[32m**************  Iteration 17 *****************
[0mLoop from 0...
Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [2]->s:4
v2:2...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[4]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 5, v1e3: 4
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 6, v1e2: 6, v1e3: 2
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 2, 
Ab cycle generated: [32m-t0-> [2]-t0-> [4]-t1-> [6]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [4]-t1-> [6]-t0-> [4]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0001:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [2]->s:2
v2:2...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 0, v1e2: 4, v1e3: 4
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 6, v1e1: 0, v1e2: 6, v1e3: 1
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:0, v2:2
[0m[33mremoving[0m edge(v[0]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[0]t1 from graph...
ITERATIONS : 3, 1, 0, 0, 0, 2, 0, 
Ab cycle generated: [32m-t0-> [2]-t0-> [1]-t1-> [5]-t0-> [0]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [5]->s:2
v2:5...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 0, v1e3: 1
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 0, 1, 
Ab cycle generated: [32m-t0-> [5]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [5]-t0-> [6]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [4]->s:0
v2:1...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [1]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [3]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [2]->s:0
v2:3...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 2, v1e3: 5
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[0]t1 from graph...
ITERATIONS : 1, 0, 0, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [3]-t0-> [0]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [3]-t0-> [0]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 5 cycles...
Cycle[0]: [2], [4], [6], [4], [2]
Cycle[1]: [2], [1], [5], [0], [2]
Cycle[2]: [5], [6], [5]
Cycle[3]: [1], [3], [1]
Cycle[4]: [3], [0], [3]
(r:0.739621)allowing Cycle[0]: [2], [4], [6], [4], [2]
(r:0.319387)removing Cycle[1]: [2], [1], [5], [0], [2]
(r:0.000000)removing Cycle[1]: [3], [0], [3]
(r:0.000000)removing Cycle[1]: [1], [3], [1]
(r:0.000000)removing Cycle[1]: [5], [6], [5]
Printing all 1 cycles in the [32mE-set[0m...
Cycle[0]: [2]-t0-> [4]-t1-> [6]-t0-> [4]-t1-> [2]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[2]->v[4]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
adding edge to v2 [6]->(4)...
adding edge to v1 [4]->(6)...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
adding edge to v2 [2]->(4)...
adding edge to v1 [4]->(2)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0006:t1], [0002:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t1], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 5
next node : 6
next node : 4
next node : 2
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [5], [6], [4], [2], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0006:t1], [0002:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t1], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 5 : i1 : c18.110771}
Edge[1] = {5 -> 6 : i1 : c14.560220}
Edge[2] = {6 -> 4 : i1 : c5.385165}
Edge[3] = {4 -> 2 : i1 : c9.055386}
Edge[4] = {2 -> 1 : i1 : c4.123106}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [5], [6], [4], [2], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0006:t1], [0002:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t1], [0005:t0]
[32mResulting cycle:[7]: [0], [5], [6], [4], [2], [1], [3], [0]
[0m
Clean up...Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [4]->s:4
v2:4...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
ITERATIONS : 0, 0, 1, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [4]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [2]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0001:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m12[[0m...
Choosing a random vertex...
first pick: [4]->s:2
v2:4...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[6]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 6, v1e1: 0, v1e2: 1, v1e3: 6
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 5, v1e2: 5, v1e3: 4
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 2, 1, 
Ab cycle generated: [32m-t0-> [4]-t0-> [6]-t1-> [5]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [6]-t1-> [5]-t0-> [6]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0001:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 2 edges: [0001:t1], [[32m0000[0m:t0]
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [5]->s:2
v2:5...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 1, v1e1: 0, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:0, v2:2
[0m[33mremoving[0m edge(v[0]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[0]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 0, v1e2: 4, v1e3: 4
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 0, v1e1: 1, v1e2: 0, v1e3: 1
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 3, v1e2: 3, v1e3: 2
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
ITERATIONS : 1, 3, 2, 4, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [5]-t0-> [0]-t1-> [2]-t0-> [1]-t1-> [3]-t0-> [1]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [5]-t0-> [0]-t1-> [2]-t0-> [1]-t1-> [3]-t0-> [1]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [0]->s:2
v2:0...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 2, v1e3: 5
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [3]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 4 cycles...
Cycle[0]: [4], [2], [4]
Cycle[1]: [4], [6], [5], [6], [4]
Cycle[2]: [5], [0], [2], [1], [3], [1], [5]
Cycle[3]: [0], [3], [0]
(r:0.000000)removing Cycle[0]: [4], [2], [4]
(r:0.000000)removing Cycle[0]: [0], [3], [0]
(r:0.200445)removing Cycle[0]: [5], [0], [2], [1], [3], [1], [5]
(r:0.982758)allowing Cycle[0]: [4], [6], [5], [6], [4]
Printing all 1 cycles in the [32mE-set[0m...
Cycle[0]: [4]-t0-> [6]-t1-> [5]-t0-> [6]-t1-> [4]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[4]->v[6]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
adding edge to v2 [5]->(6)...
adding edge to v1 [6]->(5)...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
adding edge to v2 [4]->(6)...
adding edge to v1 [6]->(4)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t1]
0005 [id:0005] -> edges: [0006:t1], [0000:t0]
0006 [id:0006] -> edges: [0005:t1], [0004:t1]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 5
next node : 6
next node : 4
next node : 2
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [5], [6], [4], [2], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t1]
0005 [id:0005] -> edges: [0006:t1], [0000:t0]
0006 [id:0006] -> edges: [0005:t1], [0004:t1]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 5 : i1 : c18.110771}
Edge[1] = {5 -> 6 : i1 : c14.560220}
Edge[2] = {6 -> 4 : i1 : c5.385165}
Edge[3] = {4 -> 2 : i1 : c9.055386}
Edge[4] = {2 -> 1 : i1 : c4.123106}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [5], [6], [4], [2], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t1]
0005 [id:0005] -> edges: [0006:t1], [0000:t0]
0006 [id:0006] -> edges: [0005:t1], [0004:t1]
[32mResulting cycle:[7]: [0], [5], [6], [4], [2], [1], [3], [0]
[0m
Clean up...[32m**************  Iteration 18 *****************
[0mLoop from 0...
Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [4]->s:4
v2:4...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
ITERATIONS : 2, 4, 1, 3, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [4]-t0-> [2]-t1-> [0]-t0-> [3]-t1-> [1]-t0-> [3]
[0m[33mCycle with tail generated, removing tail...
[0mAb cycle reversed: [32m-t1-> [3]-t0-> [1]-t1-> [3]-t0-> [0]-t1-> [2]-t0-> [4]
[0mv0,v1,v2: 0,3,4
curCycle->city[5]->id = 4
Restoring edge: 4->2
[32mrestoring[0m edge(v[4]->v[2]t0 to graph...
[32mrestoring[0m edge(v[2]->v[4]t0 to graph...
curCycle->city[4]->id = 2
Restoring edge: 2->0
[32mrestoring[0m edge(v[2]->v[0]t1 to graph...
[32mrestoring[0m edge(v[0]->v[2]t1 to graph...
Ab cycle as fixed: [32m-t1-> [3]-t0-> [1]-t1-> [3]-t0-> [0]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0005:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 2 edges: [0005:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t1], [[32m0004[0m:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 4 edges: [0006:t1], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0002[0m:t0]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [0]->s:2
v2:0...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 6, v1e1: 1, v1e2: 6, v1e3: 0
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 5, v1e2: 3, v1e3: 3
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 0, v1e1: 4, v1e2: 4, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 4, v1e2: 4, v1e3: 1
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
ITERATIONS : 0, 2, 3, 0, 4, 1, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [5]-t1-> [1]-t0-> [2]-t1-> [4]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [5]-t1-> [1]-t0-> [2]-t1-> [4]-t0-> [2]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [4]->s:2
v2:4...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[6]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 1, v1e3: 0
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 5, v1e2: 5, v1e3: 4
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 2, 1, 
Ab cycle generated: [32m-t0-> [4]-t0-> [6]-t1-> [5]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [6]-t1-> [5]-t0-> [6]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 3 cycles...
Cycle[0]: [3], [1], [3], [0], [3]
Cycle[1]: [0], [5], [1], [2], [4], [2], [0]
Cycle[2]: [4], [6], [5], [6], [4]
(r:0.481481)removing Cycle[0]: [3], [1], [3], [0], [3]
(r:0.717780)allowing Cycle[0]: [4], [6], [5], [6], [4]
(r:0.769854)allowing Cycle[1]: [0], [5], [1], [2], [4], [2], [0]
Printing all 2 cycles in the [32mE-set[0m...
Cycle[0]: [4]-t0-> [6]-t1-> [5]-t0-> [6]-t1-> [4]
Cycle[1]: [0]-t0-> [5]-t1-> [1]-t0-> [2]-t1-> [4]-t0-> [2]-t1-> [0]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[4]->v[6]t0 from graph (final edge v1)...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
adding edge to v2 [5]->(6)...
adding edge to v1 [6]->(5)...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
adding edge to v2 [4]->(6)...
adding edge to v1 [6]->(4)...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph (final edge v2)...
adding edge to v2 [1]->(5)...
adding edge to v1 [5]->(1)...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
adding edge to v2 [4]->(2)...
adding edge to v1 [2]->(4)...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
adding edge to v2 [0]->(2)...
adding edge to v1 [2]->(0)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0003:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t1], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0005:t1], [0004:t1]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 3
next node : 1
next node : 5
next node : 6
next node : 4
next node : 2
next node : 0
disjointCycle 0: [0], [3], [1], [5], [6], [4], [2], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0003:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t1], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0005:t1], [0004:t1]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 3 : i1 : c2.236068}
Edge[1] = {3 -> 1 : i1 : c3.605551}
Edge[2] = {1 -> 5 : i1 : c20.099751}
Edge[3] = {5 -> 6 : i1 : c14.560220}
Edge[4] = {6 -> 4 : i1 : c5.385165}
Edge[5] = {4 -> 2 : i1 : c9.055386}
Edge[6] = {2 -> 0 : i1 : c3.000000}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [3], [1], [5], [6], [4], [2], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0003:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t1], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0005:t1], [0004:t1]
[32mResulting cycle:[7]: [0], [3], [1], [5], [6], [4], [2], [0]
[0m
Clean up...Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [2]->s:4
v2:2...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 6, v1e1: 0, v1e2: 6, v1e3: 1
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[6]t1 from graph...
ITERATIONS : 0, 1, 0, 0, 0, 2, 3, 
Ab cycle generated: [32m-t0-> [2]-t0-> [1]-t1-> [5]-t0-> [6]
[0m[33mCycle with tail generated, removing tail...
[0mAb cycle reversed: [32m-t1-> [6]-t0-> [5]-t1-> [1]-t0-> [2]
[0mv0,v1,v2: 5,6,2
curCycle->city[3]->id = 2
Restoring edge: 2->1
[32mrestoring[0m edge(v[2]->v[1]t0 to graph...
[32mrestoring[0m edge(v[1]->v[2]t0 to graph...
curCycle->city[2]->id = 1
Restoring edge: 1->5
[32mrestoring[0m edge(v[1]->v[5]t1 to graph...
[32mrestoring[0m edge(v[5]->v[1]t1 to graph...
Ab cycle as fixed: [32m-t1-> [6]-t0-> [5]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0003[0m:t1], [[32m0002[0m:t0], [[32m0005[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0004:t1], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0001[0m:t0]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 2 edges: [0000:t0], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m12[[0m...
Choosing a random vertex...
first pick: [3]->s:4
v2:3...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 5, v1e1: 3, v1e2: 2, v1e3: 3
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 6, v1e3: 6
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[0]t1 from graph...
ITERATIONS : 3, 1, 0, 0, 0, 2, 0, 
Ab cycle generated: [32m-t0-> [3]-t0-> [1]-t1-> [5]-t0-> [0]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [3]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 2 edges: [0002:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0004:t1], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0001[0m:t0]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0001[0m:t1]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0006[0m:t0], [[32m0002[0m:t1], [[32m0006[0m:t1]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [5]->s:0
v2:2...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 3
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [2]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [4]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 2 edges: [0002:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0000:t1], [[32m0001[0m:t0]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0001[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [2]->s:2
v2:2...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 4, v1e3: 4
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 0, v1e3: 1
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 3, v1e2: 3, v1e3: 5
[32mnext iteration...v1:0, v2:2
[0m[33mremoving[0m edge(v[0]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[0]t1 from graph...
ITERATIONS : 3, 1, 0, 2, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [2]-t0-> [1]-t1-> [3]-t0-> [0]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [1]-t1-> [3]-t0-> [0]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 2 edges: [0004:t0], [[32m0004[0m:t1]
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [0]->s:0
v2:4...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 5, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 0, 1, 
Ab cycle generated: [32m-t0-> [4]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [6]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 5 cycles...
Cycle[0]: [6], [5], [6]
Cycle[1]: [3], [1], [5], [0], [3]
Cycle[2]: [2], [4], [2]
Cycle[3]: [2], [1], [3], [0], [2]
Cycle[4]: [4], [6], [4]
(r:0.000000)removing Cycle[0]: [6], [5], [6]
(r:0.000000)removing Cycle[0]: [4], [6], [4]
(r:0.959781)allowing Cycle[0]: [2], [1], [3], [0], [2]
(r:0.780924)allowing Cycle[1]: [3], [1], [5], [0], [3]
(r:0.000000)removing Cycle[2]: [2], [4], [2]
Printing all 2 cycles in the [32mE-set[0m...
Cycle[0]: [2]-t0-> [1]-t1-> [3]-t0-> [0]-t1-> [2]
Cycle[1]: [3]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [3]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph (final edge v2)...
adding edge to v2 [3]->(1)...
adding edge to v1 [1]->(3)...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[3]t0 from graph (final edge v2)...
adding edge to v2 [2]->(0)...
adding edge to v1 [0]->(2)...
[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
adding edge to v2 [5]->(1)...
adding edge to v1 [1]->(5)...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
adding edge to v2 [3]->(0)...
adding edge to v1 [0]->(3)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0002:t1], [0003:t1]
0001 [id:0001] -> edges: [0003:t1], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0001:t0], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 2
next node : 4
next node : 6
next node : 5
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [2], [4], [6], [5], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0002:t1], [0003:t1]
0001 [id:0001] -> edges: [0003:t1], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0001:t0], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 2 : i1 : c3.000000}
Edge[1] = {2 -> 4 : i1 : c9.055386}
Edge[2] = {4 -> 6 : i1 : c5.385165}
Edge[3] = {6 -> 5 : i1 : c14.560220}
Edge[4] = {5 -> 1 : i1 : c20.099751}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [2], [4], [6], [5], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0002:t1], [0003:t1]
0001 [id:0001] -> edges: [0003:t1], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0001:t0], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [2], [4], [6], [5], [1], [3], [0]
[0m
Clean up...[32m**************  Iteration 19 *****************
[0mLoop from 0...
Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [6]->s:4
v2:6...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [4]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0001:t0], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0004[0m:t1]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m12[[0m...
Choosing a random vertex...
first pick: [4]->s:2
v2:4...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 2, v1e2: 6, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:0, v2:5
[0m[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 6, v1e1: 1, v1e2: 6, v1e3: 0
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 6, v1e2: 6, v1e3: 0
[32mnext iteration...v1:5, v2:1
[0m[33mremoving[0m edge(v[5]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[5]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 1, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
ITERATIONS : 2, 6, 1, 0, 0, 3, 4, 
Ab cycle generated: [32m-t0-> [4]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [6]-t0-> [5]-t1-> [1]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [6]-t0-> [5]-t1-> [1]-t0-> [2]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [5]->s:0
v2:3...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 2, v1e3: 5
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[1]t1 from graph...
ITERATIONS : 0, 1, 0, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [3]-t0-> [1]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [3]-t0-> [1]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [0]->s:2
v2:0...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [3]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 4 cycles...
Cycle[0]: [6], [4], [6]
Cycle[1]: [4], [2], [0], [5], [6], [5], [1], [2], [4]
Cycle[2]: [3], [1], [3]
Cycle[3]: [0], [3], [0]
(r:0.000000)removing Cycle[0]: [6], [4], [6]
(r:0.000000)removing Cycle[0]: [0], [3], [0]
(r:0.000000)removing Cycle[0]: [3], [1], [3]
(r:0.849326)allowing Cycle[0]: [4], [2], [0], [5], [6], [5], [1], [2], [4]
Printing all 1 cycles in the [32mE-set[0m...
Cycle[0]: [4]-t0-> [2]-t1-> [0]-t0-> [5]-t1-> [6]-t0-> [5]-t1-> [1]-t0-> [2]-t1-> [4]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph (final edge v2)...
adding edge to v2 [0]->(2)...
adding edge to v1 [2]->(0)...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[0]t0 from graph (final edge v2)...
adding edge to v2 [6]->(5)...
adding edge to v1 [5]->(6)...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
adding edge to v2 [1]->(5)...
adding edge to v1 [5]->(1)...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
adding edge to v2 [4]->(2)...
adding edge to v1 [2]->(4)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0006:t0], [0002:t1]
0005 [id:0005] -> edges: [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t1]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 2
next node : 4
next node : 6
next node : 5
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [2], [4], [6], [5], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0006:t0], [0002:t1]
0005 [id:0005] -> edges: [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t1]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 2 : i1 : c3.000000}
Edge[1] = {2 -> 4 : i1 : c9.055386}
Edge[2] = {4 -> 6 : i1 : c5.385165}
Edge[3] = {6 -> 5 : i1 : c14.560220}
Edge[4] = {5 -> 1 : i1 : c20.099751}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [2], [4], [6], [5], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0002:t1], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0006:t0], [0002:t1]
0005 [id:0005] -> edges: [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t1]
[32mResulting cycle:[7]: [0], [2], [4], [6], [5], [1], [3], [0]
[0m
Clean up...Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [2]->s:4
v2:2...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [2]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [4]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0001:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m12[[0m...
Choosing a random vertex...
first pick: [1]->s:4
v2:1...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 5, v1e3: 3
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [1]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [3]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0005:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 2 edges: [0001:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [6]->s:4
v2:6...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [4]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0005:t1], [[32m0002[0m:t0]
0002 [id:[32m0002[0m] -> 2 edges: [0001:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [2]->s:2
v2:2...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 0, v1e2: 4, v1e3: 4
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 6, v1e1: 0, v1e2: 6, v1e3: 1
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:0, v2:2
[0m[33mremoving[0m edge(v[0]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[0]t1 from graph...
ITERATIONS : 3, 1, 0, 0, 0, 2, 0, 
Ab cycle generated: [32m-t0-> [2]-t0-> [1]-t1-> [5]-t0-> [0]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [1]->s:0
v2:5...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 0, v1e3: 1
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t0 from graph...
[33mremoving[0m edge(v[6]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[6]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 0, 1, 
Ab cycle generated: [32m-t0-> [5]-t0-> [6]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [5]-t0-> [6]-t1-> [5]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [1]->s:0
v2:3...
next cycle #5...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 2, v1e3: 5
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[0]t1 from graph...
ITERATIONS : 1, 0, 0, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [3]-t0-> [0]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [3]-t0-> [0]-t1-> [3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 6 cycles...
Cycle[0]: [2], [4], [2]
Cycle[1]: [1], [3], [1]
Cycle[2]: [6], [4], [6]
Cycle[3]: [2], [1], [5], [0], [2]
Cycle[4]: [5], [6], [5]
Cycle[5]: [3], [0], [3]
(r:0.000000)removing Cycle[0]: [2], [4], [2]
(r:0.000000)removing Cycle[0]: [3], [0], [3]
(r:0.000000)removing Cycle[0]: [5], [6], [5]
(r:0.952884)allowing Cycle[0]: [2], [1], [5], [0], [2]
(r:0.000000)removing Cycle[1]: [1], [3], [1]
(r:0.000000)removing Cycle[1]: [6], [4], [6]
Printing all 1 cycles in the [32mE-set[0m...
Cycle[0]: [2]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [2]

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph (final edge v2)...
adding edge to v2 [5]->(1)...
adding edge to v1 [1]->(5)...
[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
adding edge to v2 [2]->(0)...
adding edge to v1 [0]->(2)...
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0003:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 3
next node : 1
next node : 5
next node : 6
next node : 4
next node : 2
next node : 0
disjointCycle 0: [0], [3], [1], [5], [6], [4], [2], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0003:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 3 : i1 : c2.236068}
Edge[1] = {3 -> 1 : i1 : c3.605551}
Edge[2] = {1 -> 5 : i1 : c20.099751}
Edge[3] = {5 -> 6 : i1 : c14.560220}
Edge[4] = {6 -> 4 : i1 : c5.385165}
Edge[5] = {4 -> 2 : i1 : c9.055386}
Edge[6] = {2 -> 0 : i1 : c3.000000}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [3], [1], [5], [6], [4], [2], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0003:t0], [0002:t1]
0001 [id:0001] -> edges: [0003:t0], [0005:t1]
0002 [id:0002] -> edges: [0004:t0], [0000:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [3], [1], [5], [6], [4], [2], [0]
[0m
Clean up...[32m**************  Iteration 20 *****************
[0mLoop from 0...
Tour: [0], [3], [1], [2], [4], [6], [5]
Tour: [1], [3], [0], [2], [4], [6], [5]

Merging A with B...
creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0005:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0006:t0], [0002:t1], [0006:t1]
0005 [id:0005] -> edges: [0006:t0], [0000:t0], [0006:t1], [0001:t1]
0006 [id:0006] -> edges: [0004:t0], [0005:t0], [0004:t1], [0005:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m14[[0m...
Choosing a random vertex...
first pick: [4]->s:4
v2:4...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 2, v1e1: 6, v1e2: 2, v1e3: 6
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
ITERATIONS : 0, 0, 1, 0, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [4]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [2]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0001:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0006:t1], [[32m0006[0m:t0]
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 4 edges: [0004:t0], [[32m0005[0m:t0], [[32m0004[0m:t1], [[32m0005[0m:t1]
Generating AB Cycle, edges left: [032m12[[0m...
Choosing a random vertex...
first pick: [6]->s:4
v2:6...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 4, v1e1: 5, v1e2: 4, v1e3: 5
[32mnext iteration...v1:6, v2:4
[0m[33mremoving[0m edge(v[6]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:6
[0m[33mremoving[0m edge(v[4]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[4]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [4]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0002[0m:t1], [[32m0005[0m:t0], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t0], [[32m0005[0m:t1], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0001:t0], [[32m0000[0m:t1]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 4 edges: [0006:t0], [[32m0000[0m:t0], [[32m0006[0m:t1], [[32m0001[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [2]->s:2
v2:2...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 0, v1e2: 4, v1e3: 4
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:1, v2:5
[0m[33mremoving[0m edge(v[1]->v[5]t1 from graph...
[33mremoving[0m edge(v[5]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 6, v1e1: 0, v1e2: 6, v1e3: 1
[32mnext iteration...v1:5, v2:0
[0m[33mremoving[0m edge(v[5]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[5]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 5
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[0]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 3, v1e2: 3, v1e3: 5
[32mnext iteration...v1:0, v2:2
[0m[33mremoving[0m edge(v[0]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[0]t1 from graph...
ITERATIONS : 3, 1, 0, 4, 0, 2, 0, 
Ab cycle generated: [32m-t0-> [2]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [3]-t0-> [0]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [2]-t0-> [1]-t1-> [5]-t0-> [0]-t1-> [3]-t0-> [0]-t1-> [2]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0001:t1], [[32m0001[0m:t0]
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [0]->s:0
v2:1...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 5, v1e3: 2
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 1, v1e1: 1, v1e2: 0, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 0, 0, 
Ab cycle generated: [32m-t0-> [1]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [3]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 2 edges: [0006:t0], [[32m0006[0m:t1]
0006 [id:[32m0006[0m] -> 2 edges: [0005:t1], [[32m0005[0m:t0]
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [0]->s:0
v2:6...
next cycle #4...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 5, v1e1: 5, v1e2: 4, v1e3: 4
[32mnext iteration...v1:6, v2:5
[0m[33mremoving[0m edge(v[6]->v[5]t0 from graph...
[33mremoving[0m edge(v[5]->v[6]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 6, v1e1: 6, v1e2: 0, v1e3: 1
[32mnext iteration...v1:5, v2:6
[0m[33mremoving[0m edge(v[5]->v[6]t1 from graph...
[33mremoving[0m edge(v[6]->v[5]t1 from graph...
ITERATIONS : 0, 0, 0, 0, 0, 1, 0, 
Ab cycle generated: [32m-t0-> [6]-t0-> [5]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [6]-t0-> [5]-t1-> [6]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 7 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
0005 [id:[32m0005[0m] -> 0 edges: 
0006 [id:[32m0006[0m] -> 0 edges: 
done!
Printing all 5 cycles...
Cycle[0]: [4], [2], [4]
Cycle[1]: [6], [4], [6]
Cycle[2]: [2], [1], [5], [0], [3], [0], [2]
Cycle[3]: [1], [3], [1]
Cycle[4]: [6], [5], [6]
(r:0.000000)removing Cycle[0]: [4], [2], [4]
(r:0.000000)removing Cycle[0]: [6], [5], [6]
(r:0.000000)removing Cycle[0]: [1], [3], [1]
(r:0.086288)removing Cycle[0]: [2], [1], [5], [0], [3], [0], [2]
(r:0.000000)removing Cycle[0]: [6], [4], [6]
Printing all 0 cycles in the [32mE-set[0m...

creating empty graph (of size 7)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
allocating edges array...
Applying the E-set.
[32mIntermediate Tour T[0m contains (after applying E-set, in applyEset()): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 5
next node : 6
next node : 4
next node : 2
next node : 1
next node : 3
next node : 0
disjointCycle 0: [0], [5], [6], [4], [2], [1], [3], [0]
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains (after returning from applyESEt): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
Printing all 7 edges in the graph: 
Edge[0] = {0 -> 5 : i1 : c18.110771}
Edge[1] = {5 -> 6 : i1 : c14.560220}
Edge[2] = {6 -> 4 : i1 : c5.385165}
Edge[3] = {4 -> 2 : i1 : c9.055386}
Edge[4] = {2 -> 1 : i1 : c4.123106}
Edge[5] = {1 -> 3 : i1 : c3.605551}
Edge[6] = {3 -> 0 : i1 : c2.236068}
Printing all 1 cycles in the [32mIntermediate Tour[0m...
Cycle[0]: [0], [5], [6], [4], [2], [1], [3], [0]

[32mIntermediate Tour T[0m contains (after returning from fixIntermediate): 
0000 [id:0000] -> edges: [0005:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0006:t0]
0005 [id:0005] -> edges: [0006:t0], [0000:t0]
0006 [id:0006] -> edges: [0004:t0], [0005:t0]
[32mResulting cycle:[7]: [0], [5], [6], [4], [2], [1], [3], [0]
[0m
Clean up...[33mExiting because the tours converged!
[0m[33mrandSeed: 1352137863, citiesFile: 'input/cities2.in'
[0m[32mProgram ran to completion (done).
[0m