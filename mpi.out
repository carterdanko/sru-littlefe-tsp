Picked a random seed ([31m1352135829[0m).
Picked a random seed ([31m1352135829[0m).
Just set up MPI on rank 1!
Island receiving citysize...
Just set up MPI on rank 0!
Loading cities...done! (loaded 5 cities from the file)
done! (loaded 5 cities from the file)

(1,0)->4.472136	
(2,0)->3.000000	(2,1)->4.123106	
(3,0)->2.236068	(3,1)->3.605551	(3,2)->4.472136	
(4,0)->6.082763	(4,1)->8.544003	(4,2)->9.055386	(4,3)->5.099020	
 -- DISTANCE TABLE --
      00   01   02   03   04 
00 :0.00 4.47 3.00 2.24 6.08 
01 :4.47 0.00 4.12 3.61 8.54 
02 :3.00 4.12 0.00 4.47 9.06 
03 :2.24 3.61 4.47 0.00 5.10 
04 :6.08 8.54 9.06 5.10 0.00 

Num Cities: 0005
---------------------------
City[0000] at 0001, 0004   [id: 0000]
City[0001] at 0005, 0002   [id: 0001]
City[0002] at 0001, 0001   [id: 0002]
City[0003] at 0003, 0005   [id: 0003]
City[0004] at 0002, 0010   [id: 0004]
CITY_TO_INT::  0(1,4)  1(5,2)  2(1,1)  3(3,5)  4(2,10)  
Master sends city size to 1
Master sends tours to 1

(1,0)->4.472136	
(2,0)->3.000000	(2,1)->4.123106	
(3,0)->2.236068	(3,1)->3.605551	(3,2)->4.472136	
(4,0)->6.082763	(4,1)->8.544003	(4,2)->9.055386	(4,3)->5.099020	

Num Cities: 0005
---------------------------
City[0000] at 0001, 0004   [id: 0000]
City[0001] at 0005, 0002   [id: 0001]
City[0002] at 0001, 0001   [id: 0002]
City[0003] at 0003, 0005   [id: 0003]
City[0004] at 0002, 0010   [id: 0004]
Loop from 0...
Running listener on 0...
TOUR_TO_INT::  0:0->0  0:1->3  0:2->1  0:3->2  0:4->4  
TOUR_TO_INT::  1:0->1  1:1->3  1:2->0  1:3->2  1:4->4  
TOUR_TO_INT::  2:0->2  2:1->0  2:2->3  2:3->1  2:4->4  
TOUR_TO_INT::  3:0->3  3:1->0  3:2->2  3:3->1  3:4->4  
TOUR_TO_INT::  4:0->4  4:1->3  4:2->0  4:3->2  4:4->1  
Master sends tours to 1
Master waiting to receive tours from islands...
Got city size!
Island waiting for cities...
Island got cities!
INT_TO_CITY::  0(1,4)  1(5,2)  2(1,1)  3(3,5)  4(2,10)  
Tour: [0], [1], [2], [3], [4]

(1,0)->4.472136	
(2,0)->3.000000	(2,1)->4.123106	
(3,0)->2.236068	(3,1)->3.605551	(3,2)->4.472136	
(4,0)->6.082763	(4,1)->8.544003	(4,2)->9.055386	(4,3)->5.099020	

Num Cities: 0005
---------------------------
City[0000] at 0001, 0004   [id: 0000]
City[0001] at 0005, 0002   [id: 0001]
City[0002] at 0001, 0001   [id: 0002]
City[0003] at 0003, 0005   [id: 0003]
City[0004] at 0002, 0010   [id: 0004]
Loop from 1...
Running GA on 1...
Island waiting to receive tours from master...
OK! Island received non-empty tour.
in intToTour_t()
INT_TO_TOUR::  0:0->0  0:1->3  0:2->1  0:3->2  0:4->4  
INT_TO_TOUR::  1:0->1  1:1->3  1:2->0  1:3->2  1:4->4  
INT_TO_TOUR::  2:0->2  2:1->0  2:2->3  2:3->1  2:4->4  
INT_TO_TOUR::  3:0->3  3:1->0  3:2->2  3:3->1  3:4->4  
INT_TO_TOUR::  4:0->4  4:1->3  4:2->0  4:3->2  4:4->1  
>> NOW RUNNING EAX <<
Tour: [0], [3], [1], [2], [4]
Tour: [1], [3], [0], [2], [4]

Merging A with B...
creating empty graph (of size 5)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0004:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0004:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0000:t0], [0002:t1], [0001:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [1]->s:4
v2:1...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 4, v1e3: 3
[32mnext iteration...v1:1, v2:2
[0m[33mremoving[0m edge(v[1]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 0, c[1]: 2
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:0
[0m[33mremoving[0m edge(v[2]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[2]t1 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 4, v1e3: 2
[32mnext iteration...v1:0, v2:4
[0m[33mremoving[0m edge(v[0]->v[4]t0 from graph...
[33mremoving[0m edge(v[4]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: 2
v1e0: 2, v1e1: 1, v1e2: 2, v1e3: 0
[32mnext iteration...v1:4, v2:1
[0m[33mremoving[0m edge(v[4]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[4]t1 from graph...
ITERATIONS : 2, 0, 1, 0, 3, 
Ab cycle generated: [32m-t1886219877-> [1]-t0-> [2]-t1-> [0]-t0-> [4]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t1886219877-> [1]-t0-> [2]-t1-> [0]-t0-> [4]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 5 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 2 edges: [0003:t0], [[32m0003[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 4 edges: [0000:t0], [[32m0001[0m:t0], [[32m0001[0m:t1], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [1]->s:2
v2:1...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 4, v1e3: 2
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[1]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t1 from graph...
[33mremoving[0m edge(v[1]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 
Ab cycle generated: [32m-t0-> [1]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [1]-t0-> [3]-t1-> [1]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 5 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 2 edges: [0004:t1], [[32m0004[0m:t0]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 2 edges: [0002:t0], [[32m0002[0m:t1]
Generating AB Cycle, edges left: [032m4[[0m...
Choosing a random vertex...
first pick: [1]->s:0
v2:4...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 2, v1e1: 2, v1e2: 1, v1e3: 0
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 0, v1e3: 1
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
ITERATIONS : 0, 0, 1, 0, 0, 
Ab cycle generated: [32m-t0-> [4]-t0-> [2]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [4]-t0-> [2]-t1-> [4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 5 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [0]->s:2
v2:0...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 4, v1e3: 2
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 
Ab cycle generated: [32m-t0-> [0]-t0-> [3]
[0mNo fixing necessary (no 'tail' on cycle)
.Ab cycle as fixed: [32m-t0-> [0]-t0-> [3]-t1-> [0]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 5 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
done!
Printing all 4 cycles...
Cycle[0]: [1], [2], [0], [4], [1]
Cycle[1]: [1], [3], [1]
Cycle[2]: [4], [2], [4]
Cycle[3]: [0], [3], [0]
(r:0.022200)removing Cycle[0]: [1], [2], [0], [4], [1]
(r:0.000000)removing Cycle[0]: [0], [3], [0]
(r:0.000000)removing Cycle[0]: [4], [2], [4]
(r:0.000000)removing Cycle[0]: [1], [3], [1]
Printing all 0 cycles in the [32mE-set[0m...

creating empty graph (of size 5)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains (this is tourA): 
0000 [id:0000] -> edges: [0004:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0000:t0]
allocating edges array...
