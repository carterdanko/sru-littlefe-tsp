Picked a random seed ([31m1351724931[0m).
Loading cities...done! (loaded 5 cities from the file)
Enter dist table

(1,0)->4.472136	
(2,0)->3.000000	(2,1)->4.123106	
(3,0)->2.236068	(3,1)->3.605551	(3,2)->4.472136	
(4,0)->6.082763	(4,1)->8.544003	(4,2)->9.055386	(4,3)->5.099020	
Exit dist table

Num Cities: 0005
---------------------------
City[0000] at 0001, 0004   [id: 0000]
City[0001] at 0005, 0002   [id: 0001]
City[0002] at 0001, 0001   [id: 0002]
City[0003] at 0003, 0005   [id: 0003]
City[0004] at 0002, 0010   [id: 0004]
N-->5
-- 0 --> 3 --> 5 --> 1 --> 2 
Tour: [0], [3], [1], [2], [4]
-- 1 --> 3 --> 1 --> 1 --> 2 
Tour: [1], [3], [0], [2], [4]
-- 2 --> 1 --> 3 --> 5 --> 2 
Tour: [2], [0], [3], [1], [4]
-- 3 --> 1 --> 1 --> 5 --> 2 
Tour: [3], [0], [2], [1], [4]
-- 4 --> 3 --> 1 --> 1 --> 5 
Tour: [4], [3], [0], [2], [1]
Tour: [0], [3], [1], [2], [4]
Tour: [1], [3], [0], [2], [4]
Loop . . .
enter eax

Merging A with B...
creating empty graph (of size 5)...done!
populating the graph (merging the edges)...Special cases...done!
done!

Graph R contains: 
0000 [id:0000] -> edges: [0003:t1], [0002:t1], [0004:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0], [0004:t1], [0003:t1]
0002 [id:0002] -> edges: [0001:t0], [0004:t0], [0000:t1], [0004:t1]
0003 [id:0003] -> edges: [0000:t0], [0001:t0], [0001:t1], [0000:t1]
0004 [id:0004] -> edges: [0002:t0], [0000:t0], [0002:t1], [0001:t1]
Allocating cycles...done!
Generating AB Cycles....Generating AB Cycle, edges left: [032m10[[0m...
Choosing a random vertex...
first pick: [2]->s:4
v2:2...
next cycle #0...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 1, v1e1: 4, v1e2: 0, v1e3: 4
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 3, v1e1: 3, v1e2: 4, v1e3: 2
[32mnext iteration...v1:1, v2:4
[0m[33mremoving[0m edge(v[1]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 2, v1e1: 0, v1e2: 2, v1e3: 1
[32mnext iteration...v1:4, v2:0
[0m[33mremoving[0m edge(v[4]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 4
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[0]t1 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 0, v1e1: 1, v1e2: 1, v1e3: 0
[32mnext iteration...v1:3, v2:1
[0m[33mremoving[0m edge(v[3]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 4, v1e3: 2
[32mnext iteration...v1:1, v2:3
[0m[33mremoving[0m edge(v[1]->v[3]t1 from graph...
[33mremoving[0m edge(v[3]->v[1]t1 from graph...
ITERATIONS : 3, 1, 0, 4, 2, 
Ab cycle generated: [32m->[2]->[1]->[4]->[0]->[3]->[1][0m
[33mCycle with tail generated, removing tail...
[0mAb cycle reversed: [32m->[1]->[3]->[0]->[4]->[1]->[2]
[0mv0,v1,v2: 3,1,2
curCycle->city[5]->id = 2
Restoring edge: 2->1
[32mrestoring[0m edge(v[2]->v[1]t0 to graph...
[32mrestoring[0m edge(v[1]->v[2]t0 to graph...
curCycle->city[4]->id = 1
Restoring edge: 1->4
[32mrestoring[0m edge(v[1]->v[4]t1 to graph...
[32mrestoring[0m edge(v[4]->v[1]t1 to graph...
curCycle->city[3]->id = 4
Restoring edge: 4->0
[32mrestoring[0m edge(v[4]->v[0]t0 to graph...
[32mrestoring[0m edge(v[0]->v[4]t0 to graph...
curCycle->city[2]->id = 0
Restoring edge: 0->3
[32mrestoring[0m edge(v[0]->v[3]t1 to graph...
[32mrestoring[0m edge(v[3]->v[0]t1 to graph...
Ab cycle as fixed: [32m->[1]->[3]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 5 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t0], [[32m0002[0m:t1], [[32m0004[0m:t0], [[32m0003[0m:t1]
0001 [id:[32m0001[0m] -> 2 edges: [0002:t0], [[32m0004[0m:t1]
0002 [id:[32m0002[0m] -> 4 edges: [0004:t1], [[32m0004[0m:t0], [[32m0000[0m:t1], [[32m0001[0m:t0]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t0], [[32m0000[0m:t1]
0004 [id:[32m0004[0m] -> 4 edges: [0002:t0], [[32m0002[0m:t1], [[32m0001[0m:t1], [[32m0000[0m:t0]
Generating AB Cycle, edges left: [032m8[[0m...
Choosing a random vertex...
first pick: [3]->s:2
v2:3...
next cycle #1...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[3]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 4, v1e3: 3
[32mnext iteration...v1:0, v2:2
[0m[33mremoving[0m edge(v[0]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[0]t1 from graph...
Adding edge to cycle...
v2i: 2, c[0]: 1, c[1]: 2
v1e0: 4, v1e1: 4, v1e2: 1, v1e3: 0
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:1, v2:4
[0m[33mremoving[0m edge(v[1]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: 2
v1e0: 2, v1e1: 2, v1e2: 0, v1e3: 1
[32mnext iteration...v1:4, v2:2
[0m[33mremoving[0m edge(v[4]->v[2]t0 from graph...
[33mremoving[0m edge(v[2]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 4, v1e2: 1, v1e3: 0
[32mnext iteration...v1:2, v2:4
[0m[33mremoving[0m edge(v[2]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[2]t1 from graph...
ITERATIONS : 1, 3, 2, 0, 4, 
Ab cycle generated: [32m->[3]->[0]->[2]->[1]->[4]->[2][0m
[33mCycle with tail generated, removing tail...
[0mAb cycle reversed: [32m->[2]->[4]->[1]->[2]->[0]->[3]
[0mv0,v1,v2: 4,2,3
curCycle->city[5]->id = 3
Restoring edge: 3->0
[32mrestoring[0m edge(v[3]->v[0]t0 to graph...
[32mrestoring[0m edge(v[0]->v[3]t0 to graph...
curCycle->city[4]->id = 0
Restoring edge: 0->2
[32mrestoring[0m edge(v[0]->v[2]t1 to graph...
[32mrestoring[0m edge(v[2]->v[0]t1 to graph...
curCycle->city[3]->id = 2
Restoring edge: 2->1
[32mrestoring[0m edge(v[2]->v[1]t0 to graph...
[32mrestoring[0m edge(v[1]->v[2]t0 to graph...
curCycle->city[2]->id = 1
Restoring edge: 1->4
[32mrestoring[0m edge(v[1]->v[4]t1 to graph...
[32mrestoring[0m edge(v[4]->v[1]t1 to graph...
Ab cycle as fixed: [32m->[2]->[4]
[0mnext AB Cycle (back to top of outer while)

Graph R contains 5 nodes: 
0000 [id:[32m0000[0m] -> 4 edges: [0003:t1], [[32m0004[0m:t0], [[32m0003[0m:t0], [[32m0002[0m:t1]
0001 [id:[32m0001[0m] -> 2 edges: [0002:t0], [[32m0004[0m:t1]
0002 [id:[32m0002[0m] -> 2 edges: [0000:t1], [[32m0001[0m:t0]
0003 [id:[32m0003[0m] -> 2 edges: [0000:t1], [[32m0000[0m:t0]
0004 [id:[32m0004[0m] -> 2 edges: [0000:t0], [[32m0001[0m:t1]
Generating AB Cycle, edges left: [032m6[[0m...
Choosing a random vertex...
first pick: [2]->s:2
v2:2...
next cycle #2...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 4, v1e3: 4
[32mnext iteration...v1:2, v2:1
[0m[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 4, v1e1: 2, v1e2: 3, v1e3: 3
[32mnext iteration...v1:1, v2:4
[0m[33mremoving[0m edge(v[1]->v[4]t1 from graph...
[33mremoving[0m edge(v[4]->v[1]t1 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 1, v1e2: 2, v1e3: 2
[32mnext iteration...v1:4, v2:0
[0m[33mremoving[0m edge(v[4]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[4]t0 from graph...
Adding edge to cycle...
v2i: 1, c[0]: 0, c[1]: 1
v1e0: 3, v1e1: 2, v1e2: 3, v1e3: 4
[32mnext iteration...v1:0, v2:2
[0m[33mremoving[0m edge(v[0]->v[2]t1 from graph...
[33mremoving[0m edge(v[2]->v[0]t1 from graph...
ITERATIONS : 3, 1, 0, 0, 2, 
Ab cycle generated: [32m->[2]->[1]->[4]->[0][0m
No fixing necessary (no 'tail' on cycle)
.next AB Cycle (back to top of outer while)

Graph R contains 5 nodes: 
0000 [id:[32m0000[0m] -> 2 edges: [0003:t1], [[32m0003[0m:t0]
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 2 edges: [0000:t1], [[32m0000[0m:t0]
0004 [id:[32m0004[0m] -> 0 edges: 
Generating AB Cycle, edges left: [032m2[[0m...
Choosing a random vertex...
first pick: [4]->s:0
v2:0...
next cycle #3...
Initializing cycle...
entering cycle loop...
Adding edge to cycle...
v2i: 1, c[0]: 1, c[1]: -1
v1e0: 3, v1e1: 3, v1e2: 2, v1e3: 4
[32mnext iteration...v1:0, v2:3
[0m[33mremoving[0m edge(v[0]->v[3]t0 from graph...
[33mremoving[0m edge(v[3]->v[0]t0 from graph...
Adding edge to cycle...
v2i: 0, c[0]: 0, c[1]: -1
v1e0: 0, v1e1: 0, v1e2: 1, v1e3: 1
[32mnext iteration...v1:3, v2:0
[0m[33mremoving[0m edge(v[3]->v[0]t1 from graph...
[33mremoving[0m edge(v[0]->v[3]t1 from graph...
ITERATIONS : 0, 0, 0, 1, 0, 
Ab cycle generated: [32m->[0]->[3][0m
No fixing necessary (no 'tail' on cycle)
.next AB Cycle (back to top of outer while)

Graph R contains 5 nodes: 
0000 [id:[32m0000[0m] -> 0 edges: 
0001 [id:[32m0001[0m] -> 0 edges: 
0002 [id:[32m0002[0m] -> 0 edges: 
0003 [id:[32m0003[0m] -> 0 edges: 
0004 [id:[32m0004[0m] -> 0 edges: 
done!
Printing all 4 cycles...
Cycle[0]: [1], [3], [1]
Cycle[1]: [2], [4], [2]
Cycle[2]: [2], [1], [4], [0], [2]
Cycle[3]: [0], [3], [0]
(r:0.000000)removing Cycle[0]: [1], [3], [1]
(r:0.000000)removing Cycle[0]: [0], [3], [0]
(r:0.809411)allowing Cycle[0]: [2], [1], [4], [0], [2]
(r:0.000000)removing Cycle[1]: [2], [4], [2]
Printing all 1 cycles in the [32mE-set[0m...
Cycle[0]: [2], [1], [4], [0], [2]

creating empty graph (of size 5)...done!
populating the graph (merging the edges)...Special cases...done!

[32mIntermediate Tour T[0m contains: 
0000 [id:0000] -> edges: [0004:t0], [0003:t0]
0001 [id:0001] -> edges: [0003:t0], [0002:t0]
0002 [id:0002] -> edges: [0001:t0], [0004:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0000:t0]
allocating edges array...
Applying the E-set.
[33mremoving[0m edge(v[2]->v[1]t0 from graph...
[33mremoving[0m edge(v[1]->v[2]t0 from graph (final edge v2)...
adding edge to v2->(1)...
adding edge to v1->(4)...
[33mremoving[0m edge(v[4]->v[0]t0 from graph...
[33mremoving[0m edge(v[0]->v[4]t0 from graph...
adding edge to v2->(0)...
adding edge to v1->(2)...

INTERMEDIATE TOUR AFTER APPLYING E-SET:
[32mIntermediate Tour T[0m contains: 
0000 [id:0000] -> edges: [0003:t0], [0002:t0]
0001 [id:0001] -> edges: [0003:t0], [0004:t0]
0002 [id:0002] -> edges: [0004:t0], [0000:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0001:t0]
tracking disjoint cycles...
grabbing first unvisited node: 0
next node : 3
p1<p2 inside lookup_distance: distTable[(3*(3-1)/2)+0==3]=2.236068
(no inline):initialized edge = {0 -> 3 : i1 : c2.236068}
next node : 1
p1>p2 inside lookup_distance: distTable[(3*(3-1)/2)+1==4]=3.605551
(no inline):initialized edge = {3 -> 1 : i1 : c3.605551}
next node : 4
p1<p2 inside lookup_distance: distTable[(4*(4-1)/2)+1==7]=8.544003
(no inline):initialized edge = {1 -> 4 : i1 : c8.544003}
next node : 2
p1>p2 inside lookup_distance: distTable[(4*(4-1)/2)+2==8]=9.055386
(no inline):initialized edge = {4 -> 2 : i1 : c9.055386}
next node : 0
p1>p2 inside lookup_distance: distTable[(2*(2-1)/2)+0==1]=3.000000
(no inline):initialized edge = {2 -> 0 : i1 : c3.000000}
Checking visited array.
there were [32m1[0m disjoint cycles.

[32mIntermediate Tour T[0m contains: 
0000 [id:0000] -> edges: [0003:t0], [0002:t0]
0001 [id:0001] -> edges: [0003:t0], [0004:t0]
0002 [id:0002] -> edges: [0004:t0], [0000:t0]
0003 [id:0003] -> edges: [0000:t0], [0001:t0]
0004 [id:0004] -> edges: [0002:t0], [0001:t0]
Printing all 5 edges in the graph: 
Edge[0] = {0 -> 3 : i1 : c2.236068}
Edge[1] = {3 -> 1 : i1 : c3.605551}
Edge[2] = {1 -> 4 : i1 : c8.544003}
Edge[3] = {4 -> 2 : i1 : c9.055386}
E